// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_server/camera_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_camera_5fserver_2fcamera_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_camera_5fserver_2fcamera_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_camera_5fserver_2fcamera_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_camera_5fserver_2fcamera_5fserver_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_camera_5fserver_2fcamera_5fserver_2eproto;
namespace mavsdk {
namespace rpc {
namespace camera_server {
class CameraServerResult;
struct CameraServerResultDefaultTypeInternal;
extern CameraServerResultDefaultTypeInternal _CameraServerResult_default_instance_;
class CaptureInfo;
struct CaptureInfoDefaultTypeInternal;
extern CaptureInfoDefaultTypeInternal _CaptureInfo_default_instance_;
class CaptureStatus;
struct CaptureStatusDefaultTypeInternal;
extern CaptureStatusDefaultTypeInternal _CaptureStatus_default_instance_;
class CaptureStatusResponse;
struct CaptureStatusResponseDefaultTypeInternal;
extern CaptureStatusResponseDefaultTypeInternal _CaptureStatusResponse_default_instance_;
class FormatStorageResponse;
struct FormatStorageResponseDefaultTypeInternal;
extern FormatStorageResponseDefaultTypeInternal _FormatStorageResponse_default_instance_;
class Information;
struct InformationDefaultTypeInternal;
extern InformationDefaultTypeInternal _Information_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class Quaternion;
struct QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class ResetSettingsResponse;
struct ResetSettingsResponseDefaultTypeInternal;
extern ResetSettingsResponseDefaultTypeInternal _ResetSettingsResponse_default_instance_;
class RespondCaptureStatusRequest;
struct RespondCaptureStatusRequestDefaultTypeInternal;
extern RespondCaptureStatusRequestDefaultTypeInternal _RespondCaptureStatusRequest_default_instance_;
class RespondCaptureStatusResponse;
struct RespondCaptureStatusResponseDefaultTypeInternal;
extern RespondCaptureStatusResponseDefaultTypeInternal _RespondCaptureStatusResponse_default_instance_;
class RespondStorageInformationRequest;
struct RespondStorageInformationRequestDefaultTypeInternal;
extern RespondStorageInformationRequestDefaultTypeInternal _RespondStorageInformationRequest_default_instance_;
class RespondStorageInformationResponse;
struct RespondStorageInformationResponseDefaultTypeInternal;
extern RespondStorageInformationResponseDefaultTypeInternal _RespondStorageInformationResponse_default_instance_;
class RespondTakePhotoRequest;
struct RespondTakePhotoRequestDefaultTypeInternal;
extern RespondTakePhotoRequestDefaultTypeInternal _RespondTakePhotoRequest_default_instance_;
class RespondTakePhotoResponse;
struct RespondTakePhotoResponseDefaultTypeInternal;
extern RespondTakePhotoResponseDefaultTypeInternal _RespondTakePhotoResponse_default_instance_;
class SetInformationRequest;
struct SetInformationRequestDefaultTypeInternal;
extern SetInformationRequestDefaultTypeInternal _SetInformationRequest_default_instance_;
class SetInformationResponse;
struct SetInformationResponseDefaultTypeInternal;
extern SetInformationResponseDefaultTypeInternal _SetInformationResponse_default_instance_;
class SetModeResponse;
struct SetModeResponseDefaultTypeInternal;
extern SetModeResponseDefaultTypeInternal _SetModeResponse_default_instance_;
class StartVideoResponse;
struct StartVideoResponseDefaultTypeInternal;
extern StartVideoResponseDefaultTypeInternal _StartVideoResponse_default_instance_;
class StartVideoStreamingResponse;
struct StartVideoStreamingResponseDefaultTypeInternal;
extern StartVideoStreamingResponseDefaultTypeInternal _StartVideoStreamingResponse_default_instance_;
class StopVideoResponse;
struct StopVideoResponseDefaultTypeInternal;
extern StopVideoResponseDefaultTypeInternal _StopVideoResponse_default_instance_;
class StopVideoStreamingResponse;
struct StopVideoStreamingResponseDefaultTypeInternal;
extern StopVideoStreamingResponseDefaultTypeInternal _StopVideoStreamingResponse_default_instance_;
class StorageInformation;
struct StorageInformationDefaultTypeInternal;
extern StorageInformationDefaultTypeInternal _StorageInformation_default_instance_;
class StorageInformationResponse;
struct StorageInformationResponseDefaultTypeInternal;
extern StorageInformationResponseDefaultTypeInternal _StorageInformationResponse_default_instance_;
class SubscribeCaptureStatusRequest;
struct SubscribeCaptureStatusRequestDefaultTypeInternal;
extern SubscribeCaptureStatusRequestDefaultTypeInternal _SubscribeCaptureStatusRequest_default_instance_;
class SubscribeFormatStorageRequest;
struct SubscribeFormatStorageRequestDefaultTypeInternal;
extern SubscribeFormatStorageRequestDefaultTypeInternal _SubscribeFormatStorageRequest_default_instance_;
class SubscribeResetSettingsRequest;
struct SubscribeResetSettingsRequestDefaultTypeInternal;
extern SubscribeResetSettingsRequestDefaultTypeInternal _SubscribeResetSettingsRequest_default_instance_;
class SubscribeSetModeRequest;
struct SubscribeSetModeRequestDefaultTypeInternal;
extern SubscribeSetModeRequestDefaultTypeInternal _SubscribeSetModeRequest_default_instance_;
class SubscribeStartVideoRequest;
struct SubscribeStartVideoRequestDefaultTypeInternal;
extern SubscribeStartVideoRequestDefaultTypeInternal _SubscribeStartVideoRequest_default_instance_;
class SubscribeStartVideoStreamingRequest;
struct SubscribeStartVideoStreamingRequestDefaultTypeInternal;
extern SubscribeStartVideoStreamingRequestDefaultTypeInternal _SubscribeStartVideoStreamingRequest_default_instance_;
class SubscribeStopVideoRequest;
struct SubscribeStopVideoRequestDefaultTypeInternal;
extern SubscribeStopVideoRequestDefaultTypeInternal _SubscribeStopVideoRequest_default_instance_;
class SubscribeStopVideoStreamingRequest;
struct SubscribeStopVideoStreamingRequestDefaultTypeInternal;
extern SubscribeStopVideoStreamingRequestDefaultTypeInternal _SubscribeStopVideoStreamingRequest_default_instance_;
class SubscribeStorageInformationRequest;
struct SubscribeStorageInformationRequestDefaultTypeInternal;
extern SubscribeStorageInformationRequestDefaultTypeInternal _SubscribeStorageInformationRequest_default_instance_;
class SubscribeTakePhotoRequest;
struct SubscribeTakePhotoRequestDefaultTypeInternal;
extern SubscribeTakePhotoRequestDefaultTypeInternal _SubscribeTakePhotoRequest_default_instance_;
class TakePhotoResponse;
struct TakePhotoResponseDefaultTypeInternal;
extern TakePhotoResponseDefaultTypeInternal _TakePhotoResponse_default_instance_;
}  // namespace camera_server
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::camera_server::CameraServerResult* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::CameraServerResult>(Arena*);
template<> ::mavsdk::rpc::camera_server::CaptureInfo* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::CaptureInfo>(Arena*);
template<> ::mavsdk::rpc::camera_server::CaptureStatus* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::CaptureStatus>(Arena*);
template<> ::mavsdk::rpc::camera_server::CaptureStatusResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::CaptureStatusResponse>(Arena*);
template<> ::mavsdk::rpc::camera_server::FormatStorageResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::FormatStorageResponse>(Arena*);
template<> ::mavsdk::rpc::camera_server::Information* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::Information>(Arena*);
template<> ::mavsdk::rpc::camera_server::Position* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::Position>(Arena*);
template<> ::mavsdk::rpc::camera_server::Quaternion* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::Quaternion>(Arena*);
template<> ::mavsdk::rpc::camera_server::ResetSettingsResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::ResetSettingsResponse>(Arena*);
template<> ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::RespondCaptureStatusRequest>(Arena*);
template<> ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::RespondCaptureStatusResponse>(Arena*);
template<> ::mavsdk::rpc::camera_server::RespondStorageInformationRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::RespondStorageInformationRequest>(Arena*);
template<> ::mavsdk::rpc::camera_server::RespondStorageInformationResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::RespondStorageInformationResponse>(Arena*);
template<> ::mavsdk::rpc::camera_server::RespondTakePhotoRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::RespondTakePhotoRequest>(Arena*);
template<> ::mavsdk::rpc::camera_server::RespondTakePhotoResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::RespondTakePhotoResponse>(Arena*);
template<> ::mavsdk::rpc::camera_server::SetInformationRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::SetInformationRequest>(Arena*);
template<> ::mavsdk::rpc::camera_server::SetInformationResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::SetInformationResponse>(Arena*);
template<> ::mavsdk::rpc::camera_server::SetModeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::SetModeResponse>(Arena*);
template<> ::mavsdk::rpc::camera_server::StartVideoResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::StartVideoResponse>(Arena*);
template<> ::mavsdk::rpc::camera_server::StartVideoStreamingResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::StartVideoStreamingResponse>(Arena*);
template<> ::mavsdk::rpc::camera_server::StopVideoResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::StopVideoResponse>(Arena*);
template<> ::mavsdk::rpc::camera_server::StopVideoStreamingResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::StopVideoStreamingResponse>(Arena*);
template<> ::mavsdk::rpc::camera_server::StorageInformation* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::StorageInformation>(Arena*);
template<> ::mavsdk::rpc::camera_server::StorageInformationResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::StorageInformationResponse>(Arena*);
template<> ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest>(Arena*);
template<> ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest>(Arena*);
template<> ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest>(Arena*);
template<> ::mavsdk::rpc::camera_server::SubscribeSetModeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::SubscribeSetModeRequest>(Arena*);
template<> ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::SubscribeStartVideoRequest>(Arena*);
template<> ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest>(Arena*);
template<> ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::SubscribeStopVideoRequest>(Arena*);
template<> ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest>(Arena*);
template<> ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest>(Arena*);
template<> ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest>(Arena*);
template<> ::mavsdk::rpc::camera_server::TakePhotoResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera_server::TakePhotoResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace camera_server {

enum CameraServerResult_Result : int {
  CameraServerResult_Result_RESULT_UNKNOWN = 0,
  CameraServerResult_Result_RESULT_SUCCESS = 1,
  CameraServerResult_Result_RESULT_IN_PROGRESS = 2,
  CameraServerResult_Result_RESULT_BUSY = 3,
  CameraServerResult_Result_RESULT_DENIED = 4,
  CameraServerResult_Result_RESULT_ERROR = 5,
  CameraServerResult_Result_RESULT_TIMEOUT = 6,
  CameraServerResult_Result_RESULT_WRONG_ARGUMENT = 7,
  CameraServerResult_Result_RESULT_NO_SYSTEM = 8,
  CameraServerResult_Result_CameraServerResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CameraServerResult_Result_CameraServerResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CameraServerResult_Result_IsValid(int value);
constexpr CameraServerResult_Result CameraServerResult_Result_Result_MIN = CameraServerResult_Result_RESULT_UNKNOWN;
constexpr CameraServerResult_Result CameraServerResult_Result_Result_MAX = CameraServerResult_Result_RESULT_NO_SYSTEM;
constexpr int CameraServerResult_Result_Result_ARRAYSIZE = CameraServerResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraServerResult_Result_descriptor();
template<typename T>
inline const std::string& CameraServerResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraServerResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraServerResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraServerResult_Result_descriptor(), enum_t_value);
}
inline bool CameraServerResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CameraServerResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraServerResult_Result>(
    CameraServerResult_Result_descriptor(), name, value);
}
enum StorageInformation_StorageStatus : int {
  StorageInformation_StorageStatus_STORAGE_STATUS_NOT_AVAILABLE = 0,
  StorageInformation_StorageStatus_STORAGE_STATUS_UNFORMATTED = 1,
  StorageInformation_StorageStatus_STORAGE_STATUS_FORMATTED = 2,
  StorageInformation_StorageStatus_STORAGE_STATUS_NOT_SUPPORTED = 3,
  StorageInformation_StorageStatus_StorageInformation_StorageStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StorageInformation_StorageStatus_StorageInformation_StorageStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StorageInformation_StorageStatus_IsValid(int value);
constexpr StorageInformation_StorageStatus StorageInformation_StorageStatus_StorageStatus_MIN = StorageInformation_StorageStatus_STORAGE_STATUS_NOT_AVAILABLE;
constexpr StorageInformation_StorageStatus StorageInformation_StorageStatus_StorageStatus_MAX = StorageInformation_StorageStatus_STORAGE_STATUS_NOT_SUPPORTED;
constexpr int StorageInformation_StorageStatus_StorageStatus_ARRAYSIZE = StorageInformation_StorageStatus_StorageStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StorageInformation_StorageStatus_descriptor();
template<typename T>
inline const std::string& StorageInformation_StorageStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StorageInformation_StorageStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StorageInformation_StorageStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StorageInformation_StorageStatus_descriptor(), enum_t_value);
}
inline bool StorageInformation_StorageStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StorageInformation_StorageStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StorageInformation_StorageStatus>(
    StorageInformation_StorageStatus_descriptor(), name, value);
}
enum StorageInformation_StorageType : int {
  StorageInformation_StorageType_STORAGE_TYPE_UNKNOWN = 0,
  StorageInformation_StorageType_STORAGE_TYPE_USB_STICK = 1,
  StorageInformation_StorageType_STORAGE_TYPE_SD = 2,
  StorageInformation_StorageType_STORAGE_TYPE_MICROSD = 3,
  StorageInformation_StorageType_STORAGE_TYPE_HD = 7,
  StorageInformation_StorageType_STORAGE_TYPE_OTHER = 254,
  StorageInformation_StorageType_StorageInformation_StorageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StorageInformation_StorageType_StorageInformation_StorageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StorageInformation_StorageType_IsValid(int value);
constexpr StorageInformation_StorageType StorageInformation_StorageType_StorageType_MIN = StorageInformation_StorageType_STORAGE_TYPE_UNKNOWN;
constexpr StorageInformation_StorageType StorageInformation_StorageType_StorageType_MAX = StorageInformation_StorageType_STORAGE_TYPE_OTHER;
constexpr int StorageInformation_StorageType_StorageType_ARRAYSIZE = StorageInformation_StorageType_StorageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StorageInformation_StorageType_descriptor();
template<typename T>
inline const std::string& StorageInformation_StorageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StorageInformation_StorageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StorageInformation_StorageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StorageInformation_StorageType_descriptor(), enum_t_value);
}
inline bool StorageInformation_StorageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StorageInformation_StorageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StorageInformation_StorageType>(
    StorageInformation_StorageType_descriptor(), name, value);
}
enum CaptureStatus_ImageStatus : int {
  CaptureStatus_ImageStatus_IMAGE_STATUS_IDLE = 0,
  CaptureStatus_ImageStatus_IMAGE_STATUS_CAPTURE_IN_PROGRESS = 1,
  CaptureStatus_ImageStatus_IMAGE_STATUS_INTERVAL_IDLE = 2,
  CaptureStatus_ImageStatus_IMAGE_STATUS_INTERVAL_IN_PROGRESS = 3,
  CaptureStatus_ImageStatus_CaptureStatus_ImageStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CaptureStatus_ImageStatus_CaptureStatus_ImageStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CaptureStatus_ImageStatus_IsValid(int value);
constexpr CaptureStatus_ImageStatus CaptureStatus_ImageStatus_ImageStatus_MIN = CaptureStatus_ImageStatus_IMAGE_STATUS_IDLE;
constexpr CaptureStatus_ImageStatus CaptureStatus_ImageStatus_ImageStatus_MAX = CaptureStatus_ImageStatus_IMAGE_STATUS_INTERVAL_IN_PROGRESS;
constexpr int CaptureStatus_ImageStatus_ImageStatus_ARRAYSIZE = CaptureStatus_ImageStatus_ImageStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CaptureStatus_ImageStatus_descriptor();
template<typename T>
inline const std::string& CaptureStatus_ImageStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CaptureStatus_ImageStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CaptureStatus_ImageStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CaptureStatus_ImageStatus_descriptor(), enum_t_value);
}
inline bool CaptureStatus_ImageStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CaptureStatus_ImageStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CaptureStatus_ImageStatus>(
    CaptureStatus_ImageStatus_descriptor(), name, value);
}
enum CaptureStatus_VideoStatus : int {
  CaptureStatus_VideoStatus_VIDEO_STATUS_IDLE = 0,
  CaptureStatus_VideoStatus_VIDEO_STATUS_CAPTURE_IN_PROGRESS = 1,
  CaptureStatus_VideoStatus_CaptureStatus_VideoStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CaptureStatus_VideoStatus_CaptureStatus_VideoStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CaptureStatus_VideoStatus_IsValid(int value);
constexpr CaptureStatus_VideoStatus CaptureStatus_VideoStatus_VideoStatus_MIN = CaptureStatus_VideoStatus_VIDEO_STATUS_IDLE;
constexpr CaptureStatus_VideoStatus CaptureStatus_VideoStatus_VideoStatus_MAX = CaptureStatus_VideoStatus_VIDEO_STATUS_CAPTURE_IN_PROGRESS;
constexpr int CaptureStatus_VideoStatus_VideoStatus_ARRAYSIZE = CaptureStatus_VideoStatus_VideoStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CaptureStatus_VideoStatus_descriptor();
template<typename T>
inline const std::string& CaptureStatus_VideoStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CaptureStatus_VideoStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CaptureStatus_VideoStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CaptureStatus_VideoStatus_descriptor(), enum_t_value);
}
inline bool CaptureStatus_VideoStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CaptureStatus_VideoStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CaptureStatus_VideoStatus>(
    CaptureStatus_VideoStatus_descriptor(), name, value);
}
enum TakePhotoFeedback : int {
  TAKE_PHOTO_FEEDBACK_UNKNOWN = 0,
  TAKE_PHOTO_FEEDBACK_OK = 1,
  TAKE_PHOTO_FEEDBACK_BUSY = 2,
  TAKE_PHOTO_FEEDBACK_FAILED = 3,
  TakePhotoFeedback_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TakePhotoFeedback_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TakePhotoFeedback_IsValid(int value);
constexpr TakePhotoFeedback TakePhotoFeedback_MIN = TAKE_PHOTO_FEEDBACK_UNKNOWN;
constexpr TakePhotoFeedback TakePhotoFeedback_MAX = TAKE_PHOTO_FEEDBACK_FAILED;
constexpr int TakePhotoFeedback_ARRAYSIZE = TakePhotoFeedback_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TakePhotoFeedback_descriptor();
template<typename T>
inline const std::string& TakePhotoFeedback_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TakePhotoFeedback>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TakePhotoFeedback_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TakePhotoFeedback_descriptor(), enum_t_value);
}
inline bool TakePhotoFeedback_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TakePhotoFeedback* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TakePhotoFeedback>(
    TakePhotoFeedback_descriptor(), name, value);
}
enum Mode : int {
  MODE_UNKNOWN = 0,
  MODE_PHOTO = 1,
  MODE_VIDEO = 2,
  Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Mode_IsValid(int value);
constexpr Mode Mode_MIN = MODE_UNKNOWN;
constexpr Mode Mode_MAX = MODE_VIDEO;
constexpr int Mode_ARRAYSIZE = Mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Mode_descriptor();
template<typename T>
inline const std::string& Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Mode_descriptor(), enum_t_value);
}
inline bool Mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Mode>(
    Mode_descriptor(), name, value);
}
// ===================================================================

class SetInformationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.SetInformationRequest) */ {
 public:
  inline SetInformationRequest() : SetInformationRequest(nullptr) {}
  ~SetInformationRequest() override;
  explicit PROTOBUF_CONSTEXPR SetInformationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetInformationRequest(const SetInformationRequest& from);
  SetInformationRequest(SetInformationRequest&& from) noexcept
    : SetInformationRequest() {
    *this = ::std::move(from);
  }

  inline SetInformationRequest& operator=(const SetInformationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetInformationRequest& operator=(SetInformationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetInformationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetInformationRequest* internal_default_instance() {
    return reinterpret_cast<const SetInformationRequest*>(
               &_SetInformationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetInformationRequest& a, SetInformationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetInformationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetInformationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetInformationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetInformationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetInformationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetInformationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetInformationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.SetInformationRequest";
  }
  protected:
  explicit SetInformationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInformationFieldNumber = 1,
  };
  // .mavsdk.rpc.camera_server.Information information = 1;
  bool has_information() const;
  private:
  bool _internal_has_information() const;
  public:
  void clear_information();
  const ::mavsdk::rpc::camera_server::Information& information() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera_server::Information* release_information();
  ::mavsdk::rpc::camera_server::Information* mutable_information();
  void set_allocated_information(::mavsdk::rpc::camera_server::Information* information);
  private:
  const ::mavsdk::rpc::camera_server::Information& _internal_information() const;
  ::mavsdk::rpc::camera_server::Information* _internal_mutable_information();
  public:
  void unsafe_arena_set_allocated_information(
      ::mavsdk::rpc::camera_server::Information* information);
  ::mavsdk::rpc::camera_server::Information* unsafe_arena_release_information();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.SetInformationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::camera_server::Information* information_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SetInformationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.SetInformationResponse) */ {
 public:
  inline SetInformationResponse() : SetInformationResponse(nullptr) {}
  ~SetInformationResponse() override;
  explicit PROTOBUF_CONSTEXPR SetInformationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetInformationResponse(const SetInformationResponse& from);
  SetInformationResponse(SetInformationResponse&& from) noexcept
    : SetInformationResponse() {
    *this = ::std::move(from);
  }

  inline SetInformationResponse& operator=(const SetInformationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetInformationResponse& operator=(SetInformationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetInformationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetInformationResponse* internal_default_instance() {
    return reinterpret_cast<const SetInformationResponse*>(
               &_SetInformationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetInformationResponse& a, SetInformationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetInformationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetInformationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetInformationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetInformationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetInformationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetInformationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetInformationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.SetInformationResponse";
  }
  protected:
  explicit SetInformationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera_server.CameraServerResult camera_server_result = 1;
  bool has_camera_server_result() const;
  private:
  bool _internal_has_camera_server_result() const;
  public:
  void clear_camera_server_result();
  const ::mavsdk::rpc::camera_server::CameraServerResult& camera_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera_server::CameraServerResult* release_camera_server_result();
  ::mavsdk::rpc::camera_server::CameraServerResult* mutable_camera_server_result();
  void set_allocated_camera_server_result(::mavsdk::rpc::camera_server::CameraServerResult* camera_server_result);
  private:
  const ::mavsdk::rpc::camera_server::CameraServerResult& _internal_camera_server_result() const;
  ::mavsdk::rpc::camera_server::CameraServerResult* _internal_mutable_camera_server_result();
  public:
  void unsafe_arena_set_allocated_camera_server_result(
      ::mavsdk::rpc::camera_server::CameraServerResult* camera_server_result);
  ::mavsdk::rpc::camera_server::CameraServerResult* unsafe_arena_release_camera_server_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.SetInformationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::camera_server::CameraServerResult* camera_server_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeTakePhotoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.SubscribeTakePhotoRequest) */ {
 public:
  inline SubscribeTakePhotoRequest() : SubscribeTakePhotoRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeTakePhotoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeTakePhotoRequest(const SubscribeTakePhotoRequest& from);
  SubscribeTakePhotoRequest(SubscribeTakePhotoRequest&& from) noexcept
    : SubscribeTakePhotoRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeTakePhotoRequest& operator=(const SubscribeTakePhotoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeTakePhotoRequest& operator=(SubscribeTakePhotoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeTakePhotoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeTakePhotoRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeTakePhotoRequest*>(
               &_SubscribeTakePhotoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SubscribeTakePhotoRequest& a, SubscribeTakePhotoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeTakePhotoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeTakePhotoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeTakePhotoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeTakePhotoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeTakePhotoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeTakePhotoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.SubscribeTakePhotoRequest";
  }
  protected:
  explicit SubscribeTakePhotoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.SubscribeTakePhotoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class TakePhotoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.TakePhotoResponse) */ {
 public:
  inline TakePhotoResponse() : TakePhotoResponse(nullptr) {}
  ~TakePhotoResponse() override;
  explicit PROTOBUF_CONSTEXPR TakePhotoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TakePhotoResponse(const TakePhotoResponse& from);
  TakePhotoResponse(TakePhotoResponse&& from) noexcept
    : TakePhotoResponse() {
    *this = ::std::move(from);
  }

  inline TakePhotoResponse& operator=(const TakePhotoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TakePhotoResponse& operator=(TakePhotoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TakePhotoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TakePhotoResponse* internal_default_instance() {
    return reinterpret_cast<const TakePhotoResponse*>(
               &_TakePhotoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TakePhotoResponse& a, TakePhotoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TakePhotoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TakePhotoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TakePhotoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TakePhotoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TakePhotoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TakePhotoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TakePhotoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.TakePhotoResponse";
  }
  protected:
  explicit TakePhotoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.TakePhotoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class RespondTakePhotoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.RespondTakePhotoRequest) */ {
 public:
  inline RespondTakePhotoRequest() : RespondTakePhotoRequest(nullptr) {}
  ~RespondTakePhotoRequest() override;
  explicit PROTOBUF_CONSTEXPR RespondTakePhotoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RespondTakePhotoRequest(const RespondTakePhotoRequest& from);
  RespondTakePhotoRequest(RespondTakePhotoRequest&& from) noexcept
    : RespondTakePhotoRequest() {
    *this = ::std::move(from);
  }

  inline RespondTakePhotoRequest& operator=(const RespondTakePhotoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespondTakePhotoRequest& operator=(RespondTakePhotoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RespondTakePhotoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RespondTakePhotoRequest* internal_default_instance() {
    return reinterpret_cast<const RespondTakePhotoRequest*>(
               &_RespondTakePhotoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RespondTakePhotoRequest& a, RespondTakePhotoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RespondTakePhotoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespondTakePhotoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RespondTakePhotoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RespondTakePhotoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RespondTakePhotoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RespondTakePhotoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespondTakePhotoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.RespondTakePhotoRequest";
  }
  protected:
  explicit RespondTakePhotoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptureInfoFieldNumber = 2,
    kTakePhotoFeedbackFieldNumber = 1,
  };
  // .mavsdk.rpc.camera_server.CaptureInfo capture_info = 2;
  bool has_capture_info() const;
  private:
  bool _internal_has_capture_info() const;
  public:
  void clear_capture_info();
  const ::mavsdk::rpc::camera_server::CaptureInfo& capture_info() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera_server::CaptureInfo* release_capture_info();
  ::mavsdk::rpc::camera_server::CaptureInfo* mutable_capture_info();
  void set_allocated_capture_info(::mavsdk::rpc::camera_server::CaptureInfo* capture_info);
  private:
  const ::mavsdk::rpc::camera_server::CaptureInfo& _internal_capture_info() const;
  ::mavsdk::rpc::camera_server::CaptureInfo* _internal_mutable_capture_info();
  public:
  void unsafe_arena_set_allocated_capture_info(
      ::mavsdk::rpc::camera_server::CaptureInfo* capture_info);
  ::mavsdk::rpc::camera_server::CaptureInfo* unsafe_arena_release_capture_info();

  // .mavsdk.rpc.camera_server.TakePhotoFeedback take_photo_feedback = 1;
  void clear_take_photo_feedback();
  ::mavsdk::rpc::camera_server::TakePhotoFeedback take_photo_feedback() const;
  void set_take_photo_feedback(::mavsdk::rpc::camera_server::TakePhotoFeedback value);
  private:
  ::mavsdk::rpc::camera_server::TakePhotoFeedback _internal_take_photo_feedback() const;
  void _internal_set_take_photo_feedback(::mavsdk::rpc::camera_server::TakePhotoFeedback value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.RespondTakePhotoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::camera_server::CaptureInfo* capture_info_;
  int take_photo_feedback_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class RespondTakePhotoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.RespondTakePhotoResponse) */ {
 public:
  inline RespondTakePhotoResponse() : RespondTakePhotoResponse(nullptr) {}
  ~RespondTakePhotoResponse() override;
  explicit PROTOBUF_CONSTEXPR RespondTakePhotoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RespondTakePhotoResponse(const RespondTakePhotoResponse& from);
  RespondTakePhotoResponse(RespondTakePhotoResponse&& from) noexcept
    : RespondTakePhotoResponse() {
    *this = ::std::move(from);
  }

  inline RespondTakePhotoResponse& operator=(const RespondTakePhotoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespondTakePhotoResponse& operator=(RespondTakePhotoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RespondTakePhotoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RespondTakePhotoResponse* internal_default_instance() {
    return reinterpret_cast<const RespondTakePhotoResponse*>(
               &_RespondTakePhotoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RespondTakePhotoResponse& a, RespondTakePhotoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RespondTakePhotoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespondTakePhotoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RespondTakePhotoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RespondTakePhotoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RespondTakePhotoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RespondTakePhotoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespondTakePhotoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.RespondTakePhotoResponse";
  }
  protected:
  explicit RespondTakePhotoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera_server.CameraServerResult camera_server_result = 1;
  bool has_camera_server_result() const;
  private:
  bool _internal_has_camera_server_result() const;
  public:
  void clear_camera_server_result();
  const ::mavsdk::rpc::camera_server::CameraServerResult& camera_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera_server::CameraServerResult* release_camera_server_result();
  ::mavsdk::rpc::camera_server::CameraServerResult* mutable_camera_server_result();
  void set_allocated_camera_server_result(::mavsdk::rpc::camera_server::CameraServerResult* camera_server_result);
  private:
  const ::mavsdk::rpc::camera_server::CameraServerResult& _internal_camera_server_result() const;
  ::mavsdk::rpc::camera_server::CameraServerResult* _internal_mutable_camera_server_result();
  public:
  void unsafe_arena_set_allocated_camera_server_result(
      ::mavsdk::rpc::camera_server::CameraServerResult* camera_server_result);
  ::mavsdk::rpc::camera_server::CameraServerResult* unsafe_arena_release_camera_server_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.RespondTakePhotoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::camera_server::CameraServerResult* camera_server_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Information final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.Information) */ {
 public:
  inline Information() : Information(nullptr) {}
  ~Information() override;
  explicit PROTOBUF_CONSTEXPR Information(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Information(const Information& from);
  Information(Information&& from) noexcept
    : Information() {
    *this = ::std::move(from);
  }

  inline Information& operator=(const Information& from) {
    CopyFrom(from);
    return *this;
  }
  inline Information& operator=(Information&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Information& default_instance() {
    return *internal_default_instance();
  }
  static inline const Information* internal_default_instance() {
    return reinterpret_cast<const Information*>(
               &_Information_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Information& a, Information& b) {
    a.Swap(&b);
  }
  inline void Swap(Information* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Information* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Information* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Information>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Information& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Information& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Information* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.Information";
  }
  protected:
  explicit Information(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVendorNameFieldNumber = 1,
    kModelNameFieldNumber = 2,
    kFirmwareVersionFieldNumber = 3,
    kDefinitionFileUriFieldNumber = 11,
    kFocalLengthMmFieldNumber = 4,
    kHorizontalSensorSizeMmFieldNumber = 5,
    kVerticalSensorSizeMmFieldNumber = 6,
    kHorizontalResolutionPxFieldNumber = 7,
    kVerticalResolutionPxFieldNumber = 8,
    kLensIdFieldNumber = 9,
    kDefinitionFileVersionFieldNumber = 10,
  };
  // string vendor_name = 1;
  void clear_vendor_name();
  const std::string& vendor_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vendor_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vendor_name();
  PROTOBUF_NODISCARD std::string* release_vendor_name();
  void set_allocated_vendor_name(std::string* vendor_name);
  private:
  const std::string& _internal_vendor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vendor_name(const std::string& value);
  std::string* _internal_mutable_vendor_name();
  public:

  // string model_name = 2;
  void clear_model_name();
  const std::string& model_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // string firmware_version = 3;
  void clear_firmware_version();
  const std::string& firmware_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firmware_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firmware_version();
  PROTOBUF_NODISCARD std::string* release_firmware_version();
  void set_allocated_firmware_version(std::string* firmware_version);
  private:
  const std::string& _internal_firmware_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firmware_version(const std::string& value);
  std::string* _internal_mutable_firmware_version();
  public:

  // string definition_file_uri = 11;
  void clear_definition_file_uri();
  const std::string& definition_file_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_definition_file_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_definition_file_uri();
  PROTOBUF_NODISCARD std::string* release_definition_file_uri();
  void set_allocated_definition_file_uri(std::string* definition_file_uri);
  private:
  const std::string& _internal_definition_file_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_definition_file_uri(const std::string& value);
  std::string* _internal_mutable_definition_file_uri();
  public:

  // float focal_length_mm = 4;
  void clear_focal_length_mm();
  float focal_length_mm() const;
  void set_focal_length_mm(float value);
  private:
  float _internal_focal_length_mm() const;
  void _internal_set_focal_length_mm(float value);
  public:

  // float horizontal_sensor_size_mm = 5;
  void clear_horizontal_sensor_size_mm();
  float horizontal_sensor_size_mm() const;
  void set_horizontal_sensor_size_mm(float value);
  private:
  float _internal_horizontal_sensor_size_mm() const;
  void _internal_set_horizontal_sensor_size_mm(float value);
  public:

  // float vertical_sensor_size_mm = 6;
  void clear_vertical_sensor_size_mm();
  float vertical_sensor_size_mm() const;
  void set_vertical_sensor_size_mm(float value);
  private:
  float _internal_vertical_sensor_size_mm() const;
  void _internal_set_vertical_sensor_size_mm(float value);
  public:

  // uint32 horizontal_resolution_px = 7;
  void clear_horizontal_resolution_px();
  uint32_t horizontal_resolution_px() const;
  void set_horizontal_resolution_px(uint32_t value);
  private:
  uint32_t _internal_horizontal_resolution_px() const;
  void _internal_set_horizontal_resolution_px(uint32_t value);
  public:

  // uint32 vertical_resolution_px = 8;
  void clear_vertical_resolution_px();
  uint32_t vertical_resolution_px() const;
  void set_vertical_resolution_px(uint32_t value);
  private:
  uint32_t _internal_vertical_resolution_px() const;
  void _internal_set_vertical_resolution_px(uint32_t value);
  public:

  // uint32 lens_id = 9;
  void clear_lens_id();
  uint32_t lens_id() const;
  void set_lens_id(uint32_t value);
  private:
  uint32_t _internal_lens_id() const;
  void _internal_set_lens_id(uint32_t value);
  public:

  // uint32 definition_file_version = 10;
  void clear_definition_file_version();
  uint32_t definition_file_version() const;
  void set_definition_file_version(uint32_t value);
  private:
  uint32_t _internal_definition_file_version() const;
  void _internal_set_definition_file_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.Information)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firmware_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr definition_file_uri_;
  float focal_length_mm_;
  float horizontal_sensor_size_mm_;
  float vertical_sensor_size_mm_;
  uint32_t horizontal_resolution_px_;
  uint32_t vertical_resolution_px_;
  uint32_t lens_id_;
  uint32_t definition_file_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit PROTOBUF_CONSTEXPR Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Position& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeDegFieldNumber = 1,
    kLongitudeDegFieldNumber = 2,
    kAbsoluteAltitudeMFieldNumber = 3,
    kRelativeAltitudeMFieldNumber = 4,
  };
  // double latitude_deg = 1;
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);
  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);
  public:

  // double longitude_deg = 2;
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);
  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);
  public:

  // float absolute_altitude_m = 3;
  void clear_absolute_altitude_m();
  float absolute_altitude_m() const;
  void set_absolute_altitude_m(float value);
  private:
  float _internal_absolute_altitude_m() const;
  void _internal_set_absolute_altitude_m(float value);
  public:

  // float relative_altitude_m = 4;
  void clear_relative_altitude_m();
  float relative_altitude_m() const;
  void set_relative_altitude_m(float value);
  private:
  float _internal_relative_altitude_m() const;
  void _internal_set_relative_altitude_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double latitude_deg_;
  double longitude_deg_;
  float absolute_altitude_m_;
  float relative_altitude_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Quaternion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.Quaternion) */ {
 public:
  inline Quaternion() : Quaternion(nullptr) {}
  ~Quaternion() override;
  explicit PROTOBUF_CONSTEXPR Quaternion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quaternion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Quaternion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Quaternion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.Quaternion";
  }
  protected:
  explicit Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // float w = 1;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.Quaternion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float w_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CaptureInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.CaptureInfo) */ {
 public:
  inline CaptureInfo() : CaptureInfo(nullptr) {}
  ~CaptureInfo() override;
  explicit PROTOBUF_CONSTEXPR CaptureInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CaptureInfo(const CaptureInfo& from);
  CaptureInfo(CaptureInfo&& from) noexcept
    : CaptureInfo() {
    *this = ::std::move(from);
  }

  inline CaptureInfo& operator=(const CaptureInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptureInfo& operator=(CaptureInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CaptureInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CaptureInfo* internal_default_instance() {
    return reinterpret_cast<const CaptureInfo*>(
               &_CaptureInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CaptureInfo& a, CaptureInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptureInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptureInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CaptureInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CaptureInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CaptureInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CaptureInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaptureInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.CaptureInfo";
  }
  protected:
  explicit CaptureInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileUrlFieldNumber = 6,
    kPositionFieldNumber = 1,
    kAttitudeQuaternionFieldNumber = 2,
    kTimeUtcUsFieldNumber = 3,
    kIsSuccessFieldNumber = 4,
    kIndexFieldNumber = 5,
  };
  // string file_url = 6;
  void clear_file_url();
  const std::string& file_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_url();
  PROTOBUF_NODISCARD std::string* release_file_url();
  void set_allocated_file_url(std::string* file_url);
  private:
  const std::string& _internal_file_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_url(const std::string& value);
  std::string* _internal_mutable_file_url();
  public:

  // .mavsdk.rpc.camera_server.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::mavsdk::rpc::camera_server::Position& position() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera_server::Position* release_position();
  ::mavsdk::rpc::camera_server::Position* mutable_position();
  void set_allocated_position(::mavsdk::rpc::camera_server::Position* position);
  private:
  const ::mavsdk::rpc::camera_server::Position& _internal_position() const;
  ::mavsdk::rpc::camera_server::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::mavsdk::rpc::camera_server::Position* position);
  ::mavsdk::rpc::camera_server::Position* unsafe_arena_release_position();

  // .mavsdk.rpc.camera_server.Quaternion attitude_quaternion = 2;
  bool has_attitude_quaternion() const;
  private:
  bool _internal_has_attitude_quaternion() const;
  public:
  void clear_attitude_quaternion();
  const ::mavsdk::rpc::camera_server::Quaternion& attitude_quaternion() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera_server::Quaternion* release_attitude_quaternion();
  ::mavsdk::rpc::camera_server::Quaternion* mutable_attitude_quaternion();
  void set_allocated_attitude_quaternion(::mavsdk::rpc::camera_server::Quaternion* attitude_quaternion);
  private:
  const ::mavsdk::rpc::camera_server::Quaternion& _internal_attitude_quaternion() const;
  ::mavsdk::rpc::camera_server::Quaternion* _internal_mutable_attitude_quaternion();
  public:
  void unsafe_arena_set_allocated_attitude_quaternion(
      ::mavsdk::rpc::camera_server::Quaternion* attitude_quaternion);
  ::mavsdk::rpc::camera_server::Quaternion* unsafe_arena_release_attitude_quaternion();

  // uint64 time_utc_us = 3;
  void clear_time_utc_us();
  uint64_t time_utc_us() const;
  void set_time_utc_us(uint64_t value);
  private:
  uint64_t _internal_time_utc_us() const;
  void _internal_set_time_utc_us(uint64_t value);
  public:

  // bool is_success = 4;
  void clear_is_success();
  bool is_success() const;
  void set_is_success(bool value);
  private:
  bool _internal_is_success() const;
  void _internal_set_is_success(bool value);
  public:

  // int32 index = 5;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.CaptureInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_url_;
  ::mavsdk::rpc::camera_server::Position* position_;
  ::mavsdk::rpc::camera_server::Quaternion* attitude_quaternion_;
  uint64_t time_utc_us_;
  bool is_success_;
  int32_t index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CameraServerResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.CameraServerResult) */ {
 public:
  inline CameraServerResult() : CameraServerResult(nullptr) {}
  ~CameraServerResult() override;
  explicit PROTOBUF_CONSTEXPR CameraServerResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraServerResult(const CameraServerResult& from);
  CameraServerResult(CameraServerResult&& from) noexcept
    : CameraServerResult() {
    *this = ::std::move(from);
  }

  inline CameraServerResult& operator=(const CameraServerResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraServerResult& operator=(CameraServerResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraServerResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraServerResult* internal_default_instance() {
    return reinterpret_cast<const CameraServerResult*>(
               &_CameraServerResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CameraServerResult& a, CameraServerResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraServerResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraServerResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraServerResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraServerResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraServerResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CameraServerResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraServerResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.CameraServerResult";
  }
  protected:
  explicit CameraServerResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CameraServerResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    CameraServerResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    CameraServerResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_IN_PROGRESS =
    CameraServerResult_Result_RESULT_IN_PROGRESS;
  static constexpr Result RESULT_BUSY =
    CameraServerResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_DENIED =
    CameraServerResult_Result_RESULT_DENIED;
  static constexpr Result RESULT_ERROR =
    CameraServerResult_Result_RESULT_ERROR;
  static constexpr Result RESULT_TIMEOUT =
    CameraServerResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_WRONG_ARGUMENT =
    CameraServerResult_Result_RESULT_WRONG_ARGUMENT;
  static constexpr Result RESULT_NO_SYSTEM =
    CameraServerResult_Result_RESULT_NO_SYSTEM;
  static inline bool Result_IsValid(int value) {
    return CameraServerResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    CameraServerResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    CameraServerResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    CameraServerResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return CameraServerResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return CameraServerResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return CameraServerResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.camera_server.CameraServerResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::camera_server::CameraServerResult_Result result() const;
  void set_result(::mavsdk::rpc::camera_server::CameraServerResult_Result value);
  private:
  ::mavsdk::rpc::camera_server::CameraServerResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::camera_server::CameraServerResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.CameraServerResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeStartVideoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.SubscribeStartVideoRequest) */ {
 public:
  inline SubscribeStartVideoRequest() : SubscribeStartVideoRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeStartVideoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeStartVideoRequest(const SubscribeStartVideoRequest& from);
  SubscribeStartVideoRequest(SubscribeStartVideoRequest&& from) noexcept
    : SubscribeStartVideoRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeStartVideoRequest& operator=(const SubscribeStartVideoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeStartVideoRequest& operator=(SubscribeStartVideoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeStartVideoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeStartVideoRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeStartVideoRequest*>(
               &_SubscribeStartVideoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SubscribeStartVideoRequest& a, SubscribeStartVideoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeStartVideoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeStartVideoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeStartVideoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeStartVideoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeStartVideoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeStartVideoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.SubscribeStartVideoRequest";
  }
  protected:
  explicit SubscribeStartVideoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.SubscribeStartVideoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class StartVideoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.StartVideoResponse) */ {
 public:
  inline StartVideoResponse() : StartVideoResponse(nullptr) {}
  ~StartVideoResponse() override;
  explicit PROTOBUF_CONSTEXPR StartVideoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartVideoResponse(const StartVideoResponse& from);
  StartVideoResponse(StartVideoResponse&& from) noexcept
    : StartVideoResponse() {
    *this = ::std::move(from);
  }

  inline StartVideoResponse& operator=(const StartVideoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartVideoResponse& operator=(StartVideoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartVideoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartVideoResponse* internal_default_instance() {
    return reinterpret_cast<const StartVideoResponse*>(
               &_StartVideoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(StartVideoResponse& a, StartVideoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartVideoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartVideoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartVideoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartVideoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartVideoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartVideoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartVideoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.StartVideoResponse";
  }
  protected:
  explicit StartVideoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdFieldNumber = 1,
  };
  // int32 stream_id = 1;
  void clear_stream_id();
  int32_t stream_id() const;
  void set_stream_id(int32_t value);
  private:
  int32_t _internal_stream_id() const;
  void _internal_set_stream_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.StartVideoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t stream_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeStopVideoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.SubscribeStopVideoRequest) */ {
 public:
  inline SubscribeStopVideoRequest() : SubscribeStopVideoRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeStopVideoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeStopVideoRequest(const SubscribeStopVideoRequest& from);
  SubscribeStopVideoRequest(SubscribeStopVideoRequest&& from) noexcept
    : SubscribeStopVideoRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeStopVideoRequest& operator=(const SubscribeStopVideoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeStopVideoRequest& operator=(SubscribeStopVideoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeStopVideoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeStopVideoRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeStopVideoRequest*>(
               &_SubscribeStopVideoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SubscribeStopVideoRequest& a, SubscribeStopVideoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeStopVideoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeStopVideoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeStopVideoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeStopVideoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeStopVideoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeStopVideoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.SubscribeStopVideoRequest";
  }
  protected:
  explicit SubscribeStopVideoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.SubscribeStopVideoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class StopVideoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.StopVideoResponse) */ {
 public:
  inline StopVideoResponse() : StopVideoResponse(nullptr) {}
  ~StopVideoResponse() override;
  explicit PROTOBUF_CONSTEXPR StopVideoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopVideoResponse(const StopVideoResponse& from);
  StopVideoResponse(StopVideoResponse&& from) noexcept
    : StopVideoResponse() {
    *this = ::std::move(from);
  }

  inline StopVideoResponse& operator=(const StopVideoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopVideoResponse& operator=(StopVideoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopVideoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopVideoResponse* internal_default_instance() {
    return reinterpret_cast<const StopVideoResponse*>(
               &_StopVideoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(StopVideoResponse& a, StopVideoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopVideoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopVideoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopVideoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopVideoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopVideoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopVideoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopVideoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.StopVideoResponse";
  }
  protected:
  explicit StopVideoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdFieldNumber = 1,
  };
  // int32 stream_id = 1;
  void clear_stream_id();
  int32_t stream_id() const;
  void set_stream_id(int32_t value);
  private:
  int32_t _internal_stream_id() const;
  void _internal_set_stream_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.StopVideoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t stream_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeStartVideoStreamingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.SubscribeStartVideoStreamingRequest) */ {
 public:
  inline SubscribeStartVideoStreamingRequest() : SubscribeStartVideoStreamingRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeStartVideoStreamingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeStartVideoStreamingRequest(const SubscribeStartVideoStreamingRequest& from);
  SubscribeStartVideoStreamingRequest(SubscribeStartVideoStreamingRequest&& from) noexcept
    : SubscribeStartVideoStreamingRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeStartVideoStreamingRequest& operator=(const SubscribeStartVideoStreamingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeStartVideoStreamingRequest& operator=(SubscribeStartVideoStreamingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeStartVideoStreamingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeStartVideoStreamingRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeStartVideoStreamingRequest*>(
               &_SubscribeStartVideoStreamingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SubscribeStartVideoStreamingRequest& a, SubscribeStartVideoStreamingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeStartVideoStreamingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeStartVideoStreamingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeStartVideoStreamingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeStartVideoStreamingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeStartVideoStreamingRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeStartVideoStreamingRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.SubscribeStartVideoStreamingRequest";
  }
  protected:
  explicit SubscribeStartVideoStreamingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.SubscribeStartVideoStreamingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class StartVideoStreamingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.StartVideoStreamingResponse) */ {
 public:
  inline StartVideoStreamingResponse() : StartVideoStreamingResponse(nullptr) {}
  ~StartVideoStreamingResponse() override;
  explicit PROTOBUF_CONSTEXPR StartVideoStreamingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartVideoStreamingResponse(const StartVideoStreamingResponse& from);
  StartVideoStreamingResponse(StartVideoStreamingResponse&& from) noexcept
    : StartVideoStreamingResponse() {
    *this = ::std::move(from);
  }

  inline StartVideoStreamingResponse& operator=(const StartVideoStreamingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartVideoStreamingResponse& operator=(StartVideoStreamingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartVideoStreamingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartVideoStreamingResponse* internal_default_instance() {
    return reinterpret_cast<const StartVideoStreamingResponse*>(
               &_StartVideoStreamingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(StartVideoStreamingResponse& a, StartVideoStreamingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartVideoStreamingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartVideoStreamingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartVideoStreamingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartVideoStreamingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartVideoStreamingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartVideoStreamingResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartVideoStreamingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.StartVideoStreamingResponse";
  }
  protected:
  explicit StartVideoStreamingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdFieldNumber = 1,
  };
  // int32 stream_id = 1;
  void clear_stream_id();
  int32_t stream_id() const;
  void set_stream_id(int32_t value);
  private:
  int32_t _internal_stream_id() const;
  void _internal_set_stream_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.StartVideoStreamingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t stream_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeStopVideoStreamingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.SubscribeStopVideoStreamingRequest) */ {
 public:
  inline SubscribeStopVideoStreamingRequest() : SubscribeStopVideoStreamingRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeStopVideoStreamingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeStopVideoStreamingRequest(const SubscribeStopVideoStreamingRequest& from);
  SubscribeStopVideoStreamingRequest(SubscribeStopVideoStreamingRequest&& from) noexcept
    : SubscribeStopVideoStreamingRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeStopVideoStreamingRequest& operator=(const SubscribeStopVideoStreamingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeStopVideoStreamingRequest& operator=(SubscribeStopVideoStreamingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeStopVideoStreamingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeStopVideoStreamingRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeStopVideoStreamingRequest*>(
               &_SubscribeStopVideoStreamingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SubscribeStopVideoStreamingRequest& a, SubscribeStopVideoStreamingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeStopVideoStreamingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeStopVideoStreamingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeStopVideoStreamingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeStopVideoStreamingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeStopVideoStreamingRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeStopVideoStreamingRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.SubscribeStopVideoStreamingRequest";
  }
  protected:
  explicit SubscribeStopVideoStreamingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.SubscribeStopVideoStreamingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class StopVideoStreamingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.StopVideoStreamingResponse) */ {
 public:
  inline StopVideoStreamingResponse() : StopVideoStreamingResponse(nullptr) {}
  ~StopVideoStreamingResponse() override;
  explicit PROTOBUF_CONSTEXPR StopVideoStreamingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopVideoStreamingResponse(const StopVideoStreamingResponse& from);
  StopVideoStreamingResponse(StopVideoStreamingResponse&& from) noexcept
    : StopVideoStreamingResponse() {
    *this = ::std::move(from);
  }

  inline StopVideoStreamingResponse& operator=(const StopVideoStreamingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopVideoStreamingResponse& operator=(StopVideoStreamingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopVideoStreamingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopVideoStreamingResponse* internal_default_instance() {
    return reinterpret_cast<const StopVideoStreamingResponse*>(
               &_StopVideoStreamingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(StopVideoStreamingResponse& a, StopVideoStreamingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopVideoStreamingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopVideoStreamingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopVideoStreamingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopVideoStreamingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopVideoStreamingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopVideoStreamingResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopVideoStreamingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.StopVideoStreamingResponse";
  }
  protected:
  explicit StopVideoStreamingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdFieldNumber = 1,
  };
  // int32 stream_id = 1;
  void clear_stream_id();
  int32_t stream_id() const;
  void set_stream_id(int32_t value);
  private:
  int32_t _internal_stream_id() const;
  void _internal_set_stream_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.StopVideoStreamingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t stream_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeSetModeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.SubscribeSetModeRequest) */ {
 public:
  inline SubscribeSetModeRequest() : SubscribeSetModeRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeSetModeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeSetModeRequest(const SubscribeSetModeRequest& from);
  SubscribeSetModeRequest(SubscribeSetModeRequest&& from) noexcept
    : SubscribeSetModeRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeSetModeRequest& operator=(const SubscribeSetModeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeSetModeRequest& operator=(SubscribeSetModeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeSetModeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeSetModeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeSetModeRequest*>(
               &_SubscribeSetModeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SubscribeSetModeRequest& a, SubscribeSetModeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeSetModeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeSetModeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeSetModeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeSetModeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeSetModeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeSetModeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.SubscribeSetModeRequest";
  }
  protected:
  explicit SubscribeSetModeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.SubscribeSetModeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SetModeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.SetModeResponse) */ {
 public:
  inline SetModeResponse() : SetModeResponse(nullptr) {}
  ~SetModeResponse() override;
  explicit PROTOBUF_CONSTEXPR SetModeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetModeResponse(const SetModeResponse& from);
  SetModeResponse(SetModeResponse&& from) noexcept
    : SetModeResponse() {
    *this = ::std::move(from);
  }

  inline SetModeResponse& operator=(const SetModeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetModeResponse& operator=(SetModeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetModeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetModeResponse* internal_default_instance() {
    return reinterpret_cast<const SetModeResponse*>(
               &_SetModeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SetModeResponse& a, SetModeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetModeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetModeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetModeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetModeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetModeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetModeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetModeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.SetModeResponse";
  }
  protected:
  explicit SetModeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
  };
  // .mavsdk.rpc.camera_server.Mode mode = 1;
  void clear_mode();
  ::mavsdk::rpc::camera_server::Mode mode() const;
  void set_mode(::mavsdk::rpc::camera_server::Mode value);
  private:
  ::mavsdk::rpc::camera_server::Mode _internal_mode() const;
  void _internal_set_mode(::mavsdk::rpc::camera_server::Mode value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.SetModeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeStorageInformationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.SubscribeStorageInformationRequest) */ {
 public:
  inline SubscribeStorageInformationRequest() : SubscribeStorageInformationRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeStorageInformationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeStorageInformationRequest(const SubscribeStorageInformationRequest& from);
  SubscribeStorageInformationRequest(SubscribeStorageInformationRequest&& from) noexcept
    : SubscribeStorageInformationRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeStorageInformationRequest& operator=(const SubscribeStorageInformationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeStorageInformationRequest& operator=(SubscribeStorageInformationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeStorageInformationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeStorageInformationRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeStorageInformationRequest*>(
               &_SubscribeStorageInformationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SubscribeStorageInformationRequest& a, SubscribeStorageInformationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeStorageInformationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeStorageInformationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeStorageInformationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeStorageInformationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeStorageInformationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeStorageInformationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.SubscribeStorageInformationRequest";
  }
  protected:
  explicit SubscribeStorageInformationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.SubscribeStorageInformationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class StorageInformationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.StorageInformationResponse) */ {
 public:
  inline StorageInformationResponse() : StorageInformationResponse(nullptr) {}
  ~StorageInformationResponse() override;
  explicit PROTOBUF_CONSTEXPR StorageInformationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StorageInformationResponse(const StorageInformationResponse& from);
  StorageInformationResponse(StorageInformationResponse&& from) noexcept
    : StorageInformationResponse() {
    *this = ::std::move(from);
  }

  inline StorageInformationResponse& operator=(const StorageInformationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageInformationResponse& operator=(StorageInformationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StorageInformationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StorageInformationResponse* internal_default_instance() {
    return reinterpret_cast<const StorageInformationResponse*>(
               &_StorageInformationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(StorageInformationResponse& a, StorageInformationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StorageInformationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageInformationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StorageInformationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StorageInformationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StorageInformationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StorageInformationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageInformationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.StorageInformationResponse";
  }
  protected:
  explicit StorageInformationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStorageIdFieldNumber = 1,
  };
  // int32 storage_id = 1;
  void clear_storage_id();
  int32_t storage_id() const;
  void set_storage_id(int32_t value);
  private:
  int32_t _internal_storage_id() const;
  void _internal_set_storage_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.StorageInformationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t storage_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class StorageInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.StorageInformation) */ {
 public:
  inline StorageInformation() : StorageInformation(nullptr) {}
  ~StorageInformation() override;
  explicit PROTOBUF_CONSTEXPR StorageInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StorageInformation(const StorageInformation& from);
  StorageInformation(StorageInformation&& from) noexcept
    : StorageInformation() {
    *this = ::std::move(from);
  }

  inline StorageInformation& operator=(const StorageInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageInformation& operator=(StorageInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StorageInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const StorageInformation* internal_default_instance() {
    return reinterpret_cast<const StorageInformation*>(
               &_StorageInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(StorageInformation& a, StorageInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(StorageInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StorageInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StorageInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StorageInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StorageInformation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.StorageInformation";
  }
  protected:
  explicit StorageInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StorageInformation_StorageStatus StorageStatus;
  static constexpr StorageStatus STORAGE_STATUS_NOT_AVAILABLE =
    StorageInformation_StorageStatus_STORAGE_STATUS_NOT_AVAILABLE;
  static constexpr StorageStatus STORAGE_STATUS_UNFORMATTED =
    StorageInformation_StorageStatus_STORAGE_STATUS_UNFORMATTED;
  static constexpr StorageStatus STORAGE_STATUS_FORMATTED =
    StorageInformation_StorageStatus_STORAGE_STATUS_FORMATTED;
  static constexpr StorageStatus STORAGE_STATUS_NOT_SUPPORTED =
    StorageInformation_StorageStatus_STORAGE_STATUS_NOT_SUPPORTED;
  static inline bool StorageStatus_IsValid(int value) {
    return StorageInformation_StorageStatus_IsValid(value);
  }
  static constexpr StorageStatus StorageStatus_MIN =
    StorageInformation_StorageStatus_StorageStatus_MIN;
  static constexpr StorageStatus StorageStatus_MAX =
    StorageInformation_StorageStatus_StorageStatus_MAX;
  static constexpr int StorageStatus_ARRAYSIZE =
    StorageInformation_StorageStatus_StorageStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StorageStatus_descriptor() {
    return StorageInformation_StorageStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& StorageStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StorageStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StorageStatus_Name.");
    return StorageInformation_StorageStatus_Name(enum_t_value);
  }
  static inline bool StorageStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StorageStatus* value) {
    return StorageInformation_StorageStatus_Parse(name, value);
  }

  typedef StorageInformation_StorageType StorageType;
  static constexpr StorageType STORAGE_TYPE_UNKNOWN =
    StorageInformation_StorageType_STORAGE_TYPE_UNKNOWN;
  static constexpr StorageType STORAGE_TYPE_USB_STICK =
    StorageInformation_StorageType_STORAGE_TYPE_USB_STICK;
  static constexpr StorageType STORAGE_TYPE_SD =
    StorageInformation_StorageType_STORAGE_TYPE_SD;
  static constexpr StorageType STORAGE_TYPE_MICROSD =
    StorageInformation_StorageType_STORAGE_TYPE_MICROSD;
  static constexpr StorageType STORAGE_TYPE_HD =
    StorageInformation_StorageType_STORAGE_TYPE_HD;
  static constexpr StorageType STORAGE_TYPE_OTHER =
    StorageInformation_StorageType_STORAGE_TYPE_OTHER;
  static inline bool StorageType_IsValid(int value) {
    return StorageInformation_StorageType_IsValid(value);
  }
  static constexpr StorageType StorageType_MIN =
    StorageInformation_StorageType_StorageType_MIN;
  static constexpr StorageType StorageType_MAX =
    StorageInformation_StorageType_StorageType_MAX;
  static constexpr int StorageType_ARRAYSIZE =
    StorageInformation_StorageType_StorageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StorageType_descriptor() {
    return StorageInformation_StorageType_descriptor();
  }
  template<typename T>
  static inline const std::string& StorageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StorageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StorageType_Name.");
    return StorageInformation_StorageType_Name(enum_t_value);
  }
  static inline bool StorageType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StorageType* value) {
    return StorageInformation_StorageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUsedStorageMibFieldNumber = 1,
    kAvailableStorageMibFieldNumber = 2,
    kTotalStorageMibFieldNumber = 3,
    kStorageStatusFieldNumber = 4,
    kStorageIdFieldNumber = 5,
    kStorageTypeFieldNumber = 6,
    kReadSpeedFieldNumber = 7,
    kWriteSpeedFieldNumber = 8,
  };
  // float used_storage_mib = 1;
  void clear_used_storage_mib();
  float used_storage_mib() const;
  void set_used_storage_mib(float value);
  private:
  float _internal_used_storage_mib() const;
  void _internal_set_used_storage_mib(float value);
  public:

  // float available_storage_mib = 2;
  void clear_available_storage_mib();
  float available_storage_mib() const;
  void set_available_storage_mib(float value);
  private:
  float _internal_available_storage_mib() const;
  void _internal_set_available_storage_mib(float value);
  public:

  // float total_storage_mib = 3;
  void clear_total_storage_mib();
  float total_storage_mib() const;
  void set_total_storage_mib(float value);
  private:
  float _internal_total_storage_mib() const;
  void _internal_set_total_storage_mib(float value);
  public:

  // .mavsdk.rpc.camera_server.StorageInformation.StorageStatus storage_status = 4;
  void clear_storage_status();
  ::mavsdk::rpc::camera_server::StorageInformation_StorageStatus storage_status() const;
  void set_storage_status(::mavsdk::rpc::camera_server::StorageInformation_StorageStatus value);
  private:
  ::mavsdk::rpc::camera_server::StorageInformation_StorageStatus _internal_storage_status() const;
  void _internal_set_storage_status(::mavsdk::rpc::camera_server::StorageInformation_StorageStatus value);
  public:

  // uint32 storage_id = 5;
  void clear_storage_id();
  uint32_t storage_id() const;
  void set_storage_id(uint32_t value);
  private:
  uint32_t _internal_storage_id() const;
  void _internal_set_storage_id(uint32_t value);
  public:

  // .mavsdk.rpc.camera_server.StorageInformation.StorageType storage_type = 6;
  void clear_storage_type();
  ::mavsdk::rpc::camera_server::StorageInformation_StorageType storage_type() const;
  void set_storage_type(::mavsdk::rpc::camera_server::StorageInformation_StorageType value);
  private:
  ::mavsdk::rpc::camera_server::StorageInformation_StorageType _internal_storage_type() const;
  void _internal_set_storage_type(::mavsdk::rpc::camera_server::StorageInformation_StorageType value);
  public:

  // float read_speed = 7;
  void clear_read_speed();
  float read_speed() const;
  void set_read_speed(float value);
  private:
  float _internal_read_speed() const;
  void _internal_set_read_speed(float value);
  public:

  // float write_speed = 8;
  void clear_write_speed();
  float write_speed() const;
  void set_write_speed(float value);
  private:
  float _internal_write_speed() const;
  void _internal_set_write_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.StorageInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float used_storage_mib_;
  float available_storage_mib_;
  float total_storage_mib_;
  int storage_status_;
  uint32_t storage_id_;
  int storage_type_;
  float read_speed_;
  float write_speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class RespondStorageInformationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.RespondStorageInformationRequest) */ {
 public:
  inline RespondStorageInformationRequest() : RespondStorageInformationRequest(nullptr) {}
  ~RespondStorageInformationRequest() override;
  explicit PROTOBUF_CONSTEXPR RespondStorageInformationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RespondStorageInformationRequest(const RespondStorageInformationRequest& from);
  RespondStorageInformationRequest(RespondStorageInformationRequest&& from) noexcept
    : RespondStorageInformationRequest() {
    *this = ::std::move(from);
  }

  inline RespondStorageInformationRequest& operator=(const RespondStorageInformationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespondStorageInformationRequest& operator=(RespondStorageInformationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RespondStorageInformationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RespondStorageInformationRequest* internal_default_instance() {
    return reinterpret_cast<const RespondStorageInformationRequest*>(
               &_RespondStorageInformationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(RespondStorageInformationRequest& a, RespondStorageInformationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RespondStorageInformationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespondStorageInformationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RespondStorageInformationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RespondStorageInformationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RespondStorageInformationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RespondStorageInformationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespondStorageInformationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.RespondStorageInformationRequest";
  }
  protected:
  explicit RespondStorageInformationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStorageInformationFieldNumber = 1,
  };
  // .mavsdk.rpc.camera_server.StorageInformation storage_information = 1;
  bool has_storage_information() const;
  private:
  bool _internal_has_storage_information() const;
  public:
  void clear_storage_information();
  const ::mavsdk::rpc::camera_server::StorageInformation& storage_information() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera_server::StorageInformation* release_storage_information();
  ::mavsdk::rpc::camera_server::StorageInformation* mutable_storage_information();
  void set_allocated_storage_information(::mavsdk::rpc::camera_server::StorageInformation* storage_information);
  private:
  const ::mavsdk::rpc::camera_server::StorageInformation& _internal_storage_information() const;
  ::mavsdk::rpc::camera_server::StorageInformation* _internal_mutable_storage_information();
  public:
  void unsafe_arena_set_allocated_storage_information(
      ::mavsdk::rpc::camera_server::StorageInformation* storage_information);
  ::mavsdk::rpc::camera_server::StorageInformation* unsafe_arena_release_storage_information();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.RespondStorageInformationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::camera_server::StorageInformation* storage_information_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class RespondStorageInformationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.RespondStorageInformationResponse) */ {
 public:
  inline RespondStorageInformationResponse() : RespondStorageInformationResponse(nullptr) {}
  ~RespondStorageInformationResponse() override;
  explicit PROTOBUF_CONSTEXPR RespondStorageInformationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RespondStorageInformationResponse(const RespondStorageInformationResponse& from);
  RespondStorageInformationResponse(RespondStorageInformationResponse&& from) noexcept
    : RespondStorageInformationResponse() {
    *this = ::std::move(from);
  }

  inline RespondStorageInformationResponse& operator=(const RespondStorageInformationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespondStorageInformationResponse& operator=(RespondStorageInformationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RespondStorageInformationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RespondStorageInformationResponse* internal_default_instance() {
    return reinterpret_cast<const RespondStorageInformationResponse*>(
               &_RespondStorageInformationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(RespondStorageInformationResponse& a, RespondStorageInformationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RespondStorageInformationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespondStorageInformationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RespondStorageInformationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RespondStorageInformationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RespondStorageInformationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RespondStorageInformationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespondStorageInformationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.RespondStorageInformationResponse";
  }
  protected:
  explicit RespondStorageInformationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera_server.CameraServerResult camera_server_result = 1;
  bool has_camera_server_result() const;
  private:
  bool _internal_has_camera_server_result() const;
  public:
  void clear_camera_server_result();
  const ::mavsdk::rpc::camera_server::CameraServerResult& camera_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera_server::CameraServerResult* release_camera_server_result();
  ::mavsdk::rpc::camera_server::CameraServerResult* mutable_camera_server_result();
  void set_allocated_camera_server_result(::mavsdk::rpc::camera_server::CameraServerResult* camera_server_result);
  private:
  const ::mavsdk::rpc::camera_server::CameraServerResult& _internal_camera_server_result() const;
  ::mavsdk::rpc::camera_server::CameraServerResult* _internal_mutable_camera_server_result();
  public:
  void unsafe_arena_set_allocated_camera_server_result(
      ::mavsdk::rpc::camera_server::CameraServerResult* camera_server_result);
  ::mavsdk::rpc::camera_server::CameraServerResult* unsafe_arena_release_camera_server_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.RespondStorageInformationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::camera_server::CameraServerResult* camera_server_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeCaptureStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.SubscribeCaptureStatusRequest) */ {
 public:
  inline SubscribeCaptureStatusRequest() : SubscribeCaptureStatusRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeCaptureStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeCaptureStatusRequest(const SubscribeCaptureStatusRequest& from);
  SubscribeCaptureStatusRequest(SubscribeCaptureStatusRequest&& from) noexcept
    : SubscribeCaptureStatusRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeCaptureStatusRequest& operator=(const SubscribeCaptureStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCaptureStatusRequest& operator=(SubscribeCaptureStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeCaptureStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeCaptureStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCaptureStatusRequest*>(
               &_SubscribeCaptureStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SubscribeCaptureStatusRequest& a, SubscribeCaptureStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeCaptureStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeCaptureStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeCaptureStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeCaptureStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeCaptureStatusRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeCaptureStatusRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.SubscribeCaptureStatusRequest";
  }
  protected:
  explicit SubscribeCaptureStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.SubscribeCaptureStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CaptureStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.CaptureStatusResponse) */ {
 public:
  inline CaptureStatusResponse() : CaptureStatusResponse(nullptr) {}
  ~CaptureStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR CaptureStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CaptureStatusResponse(const CaptureStatusResponse& from);
  CaptureStatusResponse(CaptureStatusResponse&& from) noexcept
    : CaptureStatusResponse() {
    *this = ::std::move(from);
  }

  inline CaptureStatusResponse& operator=(const CaptureStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptureStatusResponse& operator=(CaptureStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CaptureStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CaptureStatusResponse* internal_default_instance() {
    return reinterpret_cast<const CaptureStatusResponse*>(
               &_CaptureStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CaptureStatusResponse& a, CaptureStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptureStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptureStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CaptureStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CaptureStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CaptureStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CaptureStatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaptureStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.CaptureStatusResponse";
  }
  protected:
  explicit CaptureStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
  };
  // int32 reserved = 1;
  void clear_reserved();
  int32_t reserved() const;
  void set_reserved(int32_t value);
  private:
  int32_t _internal_reserved() const;
  void _internal_set_reserved(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.CaptureStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t reserved_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CaptureStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.CaptureStatus) */ {
 public:
  inline CaptureStatus() : CaptureStatus(nullptr) {}
  ~CaptureStatus() override;
  explicit PROTOBUF_CONSTEXPR CaptureStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CaptureStatus(const CaptureStatus& from);
  CaptureStatus(CaptureStatus&& from) noexcept
    : CaptureStatus() {
    *this = ::std::move(from);
  }

  inline CaptureStatus& operator=(const CaptureStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptureStatus& operator=(CaptureStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CaptureStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CaptureStatus* internal_default_instance() {
    return reinterpret_cast<const CaptureStatus*>(
               &_CaptureStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CaptureStatus& a, CaptureStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptureStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptureStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CaptureStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CaptureStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CaptureStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CaptureStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaptureStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.CaptureStatus";
  }
  protected:
  explicit CaptureStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CaptureStatus_ImageStatus ImageStatus;
  static constexpr ImageStatus IMAGE_STATUS_IDLE =
    CaptureStatus_ImageStatus_IMAGE_STATUS_IDLE;
  static constexpr ImageStatus IMAGE_STATUS_CAPTURE_IN_PROGRESS =
    CaptureStatus_ImageStatus_IMAGE_STATUS_CAPTURE_IN_PROGRESS;
  static constexpr ImageStatus IMAGE_STATUS_INTERVAL_IDLE =
    CaptureStatus_ImageStatus_IMAGE_STATUS_INTERVAL_IDLE;
  static constexpr ImageStatus IMAGE_STATUS_INTERVAL_IN_PROGRESS =
    CaptureStatus_ImageStatus_IMAGE_STATUS_INTERVAL_IN_PROGRESS;
  static inline bool ImageStatus_IsValid(int value) {
    return CaptureStatus_ImageStatus_IsValid(value);
  }
  static constexpr ImageStatus ImageStatus_MIN =
    CaptureStatus_ImageStatus_ImageStatus_MIN;
  static constexpr ImageStatus ImageStatus_MAX =
    CaptureStatus_ImageStatus_ImageStatus_MAX;
  static constexpr int ImageStatus_ARRAYSIZE =
    CaptureStatus_ImageStatus_ImageStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ImageStatus_descriptor() {
    return CaptureStatus_ImageStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& ImageStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ImageStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ImageStatus_Name.");
    return CaptureStatus_ImageStatus_Name(enum_t_value);
  }
  static inline bool ImageStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ImageStatus* value) {
    return CaptureStatus_ImageStatus_Parse(name, value);
  }

  typedef CaptureStatus_VideoStatus VideoStatus;
  static constexpr VideoStatus VIDEO_STATUS_IDLE =
    CaptureStatus_VideoStatus_VIDEO_STATUS_IDLE;
  static constexpr VideoStatus VIDEO_STATUS_CAPTURE_IN_PROGRESS =
    CaptureStatus_VideoStatus_VIDEO_STATUS_CAPTURE_IN_PROGRESS;
  static inline bool VideoStatus_IsValid(int value) {
    return CaptureStatus_VideoStatus_IsValid(value);
  }
  static constexpr VideoStatus VideoStatus_MIN =
    CaptureStatus_VideoStatus_VideoStatus_MIN;
  static constexpr VideoStatus VideoStatus_MAX =
    CaptureStatus_VideoStatus_VideoStatus_MAX;
  static constexpr int VideoStatus_ARRAYSIZE =
    CaptureStatus_VideoStatus_VideoStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VideoStatus_descriptor() {
    return CaptureStatus_VideoStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& VideoStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VideoStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VideoStatus_Name.");
    return CaptureStatus_VideoStatus_Name(enum_t_value);
  }
  static inline bool VideoStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VideoStatus* value) {
    return CaptureStatus_VideoStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kImageIntervalFieldNumber = 1,
    kRecordingTimeSFieldNumber = 2,
    kAvailableCapacityFieldNumber = 3,
    kImageStatusFieldNumber = 4,
    kVideoStatusFieldNumber = 5,
    kImageCountFieldNumber = 6,
  };
  // float image_interval = 1;
  void clear_image_interval();
  float image_interval() const;
  void set_image_interval(float value);
  private:
  float _internal_image_interval() const;
  void _internal_set_image_interval(float value);
  public:

  // float recording_time_s = 2;
  void clear_recording_time_s();
  float recording_time_s() const;
  void set_recording_time_s(float value);
  private:
  float _internal_recording_time_s() const;
  void _internal_set_recording_time_s(float value);
  public:

  // float available_capacity = 3;
  void clear_available_capacity();
  float available_capacity() const;
  void set_available_capacity(float value);
  private:
  float _internal_available_capacity() const;
  void _internal_set_available_capacity(float value);
  public:

  // .mavsdk.rpc.camera_server.CaptureStatus.ImageStatus image_status = 4;
  void clear_image_status();
  ::mavsdk::rpc::camera_server::CaptureStatus_ImageStatus image_status() const;
  void set_image_status(::mavsdk::rpc::camera_server::CaptureStatus_ImageStatus value);
  private:
  ::mavsdk::rpc::camera_server::CaptureStatus_ImageStatus _internal_image_status() const;
  void _internal_set_image_status(::mavsdk::rpc::camera_server::CaptureStatus_ImageStatus value);
  public:

  // .mavsdk.rpc.camera_server.CaptureStatus.VideoStatus video_status = 5;
  void clear_video_status();
  ::mavsdk::rpc::camera_server::CaptureStatus_VideoStatus video_status() const;
  void set_video_status(::mavsdk::rpc::camera_server::CaptureStatus_VideoStatus value);
  private:
  ::mavsdk::rpc::camera_server::CaptureStatus_VideoStatus _internal_video_status() const;
  void _internal_set_video_status(::mavsdk::rpc::camera_server::CaptureStatus_VideoStatus value);
  public:

  // int32 image_count = 6;
  void clear_image_count();
  int32_t image_count() const;
  void set_image_count(int32_t value);
  private:
  int32_t _internal_image_count() const;
  void _internal_set_image_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.CaptureStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float image_interval_;
  float recording_time_s_;
  float available_capacity_;
  int image_status_;
  int video_status_;
  int32_t image_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class RespondCaptureStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.RespondCaptureStatusRequest) */ {
 public:
  inline RespondCaptureStatusRequest() : RespondCaptureStatusRequest(nullptr) {}
  ~RespondCaptureStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR RespondCaptureStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RespondCaptureStatusRequest(const RespondCaptureStatusRequest& from);
  RespondCaptureStatusRequest(RespondCaptureStatusRequest&& from) noexcept
    : RespondCaptureStatusRequest() {
    *this = ::std::move(from);
  }

  inline RespondCaptureStatusRequest& operator=(const RespondCaptureStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespondCaptureStatusRequest& operator=(RespondCaptureStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RespondCaptureStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RespondCaptureStatusRequest* internal_default_instance() {
    return reinterpret_cast<const RespondCaptureStatusRequest*>(
               &_RespondCaptureStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(RespondCaptureStatusRequest& a, RespondCaptureStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RespondCaptureStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespondCaptureStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RespondCaptureStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RespondCaptureStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RespondCaptureStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RespondCaptureStatusRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespondCaptureStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.RespondCaptureStatusRequest";
  }
  protected:
  explicit RespondCaptureStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptureStatusFieldNumber = 1,
  };
  // .mavsdk.rpc.camera_server.CaptureStatus capture_status = 1;
  bool has_capture_status() const;
  private:
  bool _internal_has_capture_status() const;
  public:
  void clear_capture_status();
  const ::mavsdk::rpc::camera_server::CaptureStatus& capture_status() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera_server::CaptureStatus* release_capture_status();
  ::mavsdk::rpc::camera_server::CaptureStatus* mutable_capture_status();
  void set_allocated_capture_status(::mavsdk::rpc::camera_server::CaptureStatus* capture_status);
  private:
  const ::mavsdk::rpc::camera_server::CaptureStatus& _internal_capture_status() const;
  ::mavsdk::rpc::camera_server::CaptureStatus* _internal_mutable_capture_status();
  public:
  void unsafe_arena_set_allocated_capture_status(
      ::mavsdk::rpc::camera_server::CaptureStatus* capture_status);
  ::mavsdk::rpc::camera_server::CaptureStatus* unsafe_arena_release_capture_status();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.RespondCaptureStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::camera_server::CaptureStatus* capture_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class RespondCaptureStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.RespondCaptureStatusResponse) */ {
 public:
  inline RespondCaptureStatusResponse() : RespondCaptureStatusResponse(nullptr) {}
  ~RespondCaptureStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR RespondCaptureStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RespondCaptureStatusResponse(const RespondCaptureStatusResponse& from);
  RespondCaptureStatusResponse(RespondCaptureStatusResponse&& from) noexcept
    : RespondCaptureStatusResponse() {
    *this = ::std::move(from);
  }

  inline RespondCaptureStatusResponse& operator=(const RespondCaptureStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespondCaptureStatusResponse& operator=(RespondCaptureStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RespondCaptureStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RespondCaptureStatusResponse* internal_default_instance() {
    return reinterpret_cast<const RespondCaptureStatusResponse*>(
               &_RespondCaptureStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(RespondCaptureStatusResponse& a, RespondCaptureStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RespondCaptureStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespondCaptureStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RespondCaptureStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RespondCaptureStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RespondCaptureStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RespondCaptureStatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespondCaptureStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.RespondCaptureStatusResponse";
  }
  protected:
  explicit RespondCaptureStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera_server.CameraServerResult camera_server_result = 1;
  bool has_camera_server_result() const;
  private:
  bool _internal_has_camera_server_result() const;
  public:
  void clear_camera_server_result();
  const ::mavsdk::rpc::camera_server::CameraServerResult& camera_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera_server::CameraServerResult* release_camera_server_result();
  ::mavsdk::rpc::camera_server::CameraServerResult* mutable_camera_server_result();
  void set_allocated_camera_server_result(::mavsdk::rpc::camera_server::CameraServerResult* camera_server_result);
  private:
  const ::mavsdk::rpc::camera_server::CameraServerResult& _internal_camera_server_result() const;
  ::mavsdk::rpc::camera_server::CameraServerResult* _internal_mutable_camera_server_result();
  public:
  void unsafe_arena_set_allocated_camera_server_result(
      ::mavsdk::rpc::camera_server::CameraServerResult* camera_server_result);
  ::mavsdk::rpc::camera_server::CameraServerResult* unsafe_arena_release_camera_server_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.RespondCaptureStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::camera_server::CameraServerResult* camera_server_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeFormatStorageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.SubscribeFormatStorageRequest) */ {
 public:
  inline SubscribeFormatStorageRequest() : SubscribeFormatStorageRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeFormatStorageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeFormatStorageRequest(const SubscribeFormatStorageRequest& from);
  SubscribeFormatStorageRequest(SubscribeFormatStorageRequest&& from) noexcept
    : SubscribeFormatStorageRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeFormatStorageRequest& operator=(const SubscribeFormatStorageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeFormatStorageRequest& operator=(SubscribeFormatStorageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeFormatStorageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeFormatStorageRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeFormatStorageRequest*>(
               &_SubscribeFormatStorageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SubscribeFormatStorageRequest& a, SubscribeFormatStorageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeFormatStorageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeFormatStorageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeFormatStorageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeFormatStorageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeFormatStorageRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeFormatStorageRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.SubscribeFormatStorageRequest";
  }
  protected:
  explicit SubscribeFormatStorageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.SubscribeFormatStorageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class FormatStorageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.FormatStorageResponse) */ {
 public:
  inline FormatStorageResponse() : FormatStorageResponse(nullptr) {}
  ~FormatStorageResponse() override;
  explicit PROTOBUF_CONSTEXPR FormatStorageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormatStorageResponse(const FormatStorageResponse& from);
  FormatStorageResponse(FormatStorageResponse&& from) noexcept
    : FormatStorageResponse() {
    *this = ::std::move(from);
  }

  inline FormatStorageResponse& operator=(const FormatStorageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormatStorageResponse& operator=(FormatStorageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormatStorageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormatStorageResponse* internal_default_instance() {
    return reinterpret_cast<const FormatStorageResponse*>(
               &_FormatStorageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(FormatStorageResponse& a, FormatStorageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FormatStorageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormatStorageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FormatStorageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FormatStorageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FormatStorageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FormatStorageResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormatStorageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.FormatStorageResponse";
  }
  protected:
  explicit FormatStorageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStorageIdFieldNumber = 1,
  };
  // int32 storage_id = 1;
  void clear_storage_id();
  int32_t storage_id() const;
  void set_storage_id(int32_t value);
  private:
  int32_t _internal_storage_id() const;
  void _internal_set_storage_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.FormatStorageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t storage_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeResetSettingsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.SubscribeResetSettingsRequest) */ {
 public:
  inline SubscribeResetSettingsRequest() : SubscribeResetSettingsRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeResetSettingsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeResetSettingsRequest(const SubscribeResetSettingsRequest& from);
  SubscribeResetSettingsRequest(SubscribeResetSettingsRequest&& from) noexcept
    : SubscribeResetSettingsRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeResetSettingsRequest& operator=(const SubscribeResetSettingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeResetSettingsRequest& operator=(SubscribeResetSettingsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeResetSettingsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeResetSettingsRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeResetSettingsRequest*>(
               &_SubscribeResetSettingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(SubscribeResetSettingsRequest& a, SubscribeResetSettingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeResetSettingsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeResetSettingsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeResetSettingsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeResetSettingsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeResetSettingsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeResetSettingsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.SubscribeResetSettingsRequest";
  }
  protected:
  explicit SubscribeResetSettingsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.SubscribeResetSettingsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ResetSettingsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.ResetSettingsResponse) */ {
 public:
  inline ResetSettingsResponse() : ResetSettingsResponse(nullptr) {}
  ~ResetSettingsResponse() override;
  explicit PROTOBUF_CONSTEXPR ResetSettingsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetSettingsResponse(const ResetSettingsResponse& from);
  ResetSettingsResponse(ResetSettingsResponse&& from) noexcept
    : ResetSettingsResponse() {
    *this = ::std::move(from);
  }

  inline ResetSettingsResponse& operator=(const ResetSettingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetSettingsResponse& operator=(ResetSettingsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResetSettingsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetSettingsResponse* internal_default_instance() {
    return reinterpret_cast<const ResetSettingsResponse*>(
               &_ResetSettingsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ResetSettingsResponse& a, ResetSettingsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetSettingsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetSettingsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResetSettingsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResetSettingsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResetSettingsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResetSettingsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetSettingsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera_server.ResetSettingsResponse";
  }
  protected:
  explicit ResetSettingsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
  };
  // int32 reserved = 1;
  void clear_reserved();
  int32_t reserved() const;
  void set_reserved(int32_t value);
  private:
  int32_t _internal_reserved() const;
  void _internal_set_reserved(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.ResetSettingsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t reserved_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetInformationRequest

// .mavsdk.rpc.camera_server.Information information = 1;
inline bool SetInformationRequest::_internal_has_information() const {
  return this != internal_default_instance() && information_ != nullptr;
}
inline bool SetInformationRequest::has_information() const {
  return _internal_has_information();
}
inline void SetInformationRequest::clear_information() {
  if (GetArenaForAllocation() == nullptr && information_ != nullptr) {
    delete information_;
  }
  information_ = nullptr;
}
inline const ::mavsdk::rpc::camera_server::Information& SetInformationRequest::_internal_information() const {
  const ::mavsdk::rpc::camera_server::Information* p = information_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera_server::Information&>(
      ::mavsdk::rpc::camera_server::_Information_default_instance_);
}
inline const ::mavsdk::rpc::camera_server::Information& SetInformationRequest::information() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.SetInformationRequest.information)
  return _internal_information();
}
inline void SetInformationRequest::unsafe_arena_set_allocated_information(
    ::mavsdk::rpc::camera_server::Information* information) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(information_);
  }
  information_ = information;
  if (information) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera_server.SetInformationRequest.information)
}
inline ::mavsdk::rpc::camera_server::Information* SetInformationRequest::release_information() {
  
  ::mavsdk::rpc::camera_server::Information* temp = information_;
  information_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera_server::Information* SetInformationRequest::unsafe_arena_release_information() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.SetInformationRequest.information)
  
  ::mavsdk::rpc::camera_server::Information* temp = information_;
  information_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera_server::Information* SetInformationRequest::_internal_mutable_information() {
  
  if (information_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera_server::Information>(GetArenaForAllocation());
    information_ = p;
  }
  return information_;
}
inline ::mavsdk::rpc::camera_server::Information* SetInformationRequest::mutable_information() {
  ::mavsdk::rpc::camera_server::Information* _msg = _internal_mutable_information();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.SetInformationRequest.information)
  return _msg;
}
inline void SetInformationRequest::set_allocated_information(::mavsdk::rpc::camera_server::Information* information) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete information_;
  }
  if (information) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(information);
    if (message_arena != submessage_arena) {
      information = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, information, submessage_arena);
    }
    
  } else {
    
  }
  information_ = information;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.SetInformationRequest.information)
}

// -------------------------------------------------------------------

// SetInformationResponse

// .mavsdk.rpc.camera_server.CameraServerResult camera_server_result = 1;
inline bool SetInformationResponse::_internal_has_camera_server_result() const {
  return this != internal_default_instance() && camera_server_result_ != nullptr;
}
inline bool SetInformationResponse::has_camera_server_result() const {
  return _internal_has_camera_server_result();
}
inline void SetInformationResponse::clear_camera_server_result() {
  if (GetArenaForAllocation() == nullptr && camera_server_result_ != nullptr) {
    delete camera_server_result_;
  }
  camera_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera_server::CameraServerResult& SetInformationResponse::_internal_camera_server_result() const {
  const ::mavsdk::rpc::camera_server::CameraServerResult* p = camera_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera_server::CameraServerResult&>(
      ::mavsdk::rpc::camera_server::_CameraServerResult_default_instance_);
}
inline const ::mavsdk::rpc::camera_server::CameraServerResult& SetInformationResponse::camera_server_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.SetInformationResponse.camera_server_result)
  return _internal_camera_server_result();
}
inline void SetInformationResponse::unsafe_arena_set_allocated_camera_server_result(
    ::mavsdk::rpc::camera_server::CameraServerResult* camera_server_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_server_result_);
  }
  camera_server_result_ = camera_server_result;
  if (camera_server_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera_server.SetInformationResponse.camera_server_result)
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* SetInformationResponse::release_camera_server_result() {
  
  ::mavsdk::rpc::camera_server::CameraServerResult* temp = camera_server_result_;
  camera_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* SetInformationResponse::unsafe_arena_release_camera_server_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.SetInformationResponse.camera_server_result)
  
  ::mavsdk::rpc::camera_server::CameraServerResult* temp = camera_server_result_;
  camera_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* SetInformationResponse::_internal_mutable_camera_server_result() {
  
  if (camera_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera_server::CameraServerResult>(GetArenaForAllocation());
    camera_server_result_ = p;
  }
  return camera_server_result_;
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* SetInformationResponse::mutable_camera_server_result() {
  ::mavsdk::rpc::camera_server::CameraServerResult* _msg = _internal_mutable_camera_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.SetInformationResponse.camera_server_result)
  return _msg;
}
inline void SetInformationResponse::set_allocated_camera_server_result(::mavsdk::rpc::camera_server::CameraServerResult* camera_server_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete camera_server_result_;
  }
  if (camera_server_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_server_result);
    if (message_arena != submessage_arena) {
      camera_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_server_result, submessage_arena);
    }
    
  } else {
    
  }
  camera_server_result_ = camera_server_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.SetInformationResponse.camera_server_result)
}

// -------------------------------------------------------------------

// SubscribeTakePhotoRequest

// -------------------------------------------------------------------

// TakePhotoResponse

// int32 index = 1;
inline void TakePhotoResponse::clear_index() {
  index_ = 0;
}
inline int32_t TakePhotoResponse::_internal_index() const {
  return index_;
}
inline int32_t TakePhotoResponse::index() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.TakePhotoResponse.index)
  return _internal_index();
}
inline void TakePhotoResponse::_internal_set_index(int32_t value) {
  
  index_ = value;
}
inline void TakePhotoResponse::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.TakePhotoResponse.index)
}

// -------------------------------------------------------------------

// RespondTakePhotoRequest

// .mavsdk.rpc.camera_server.TakePhotoFeedback take_photo_feedback = 1;
inline void RespondTakePhotoRequest::clear_take_photo_feedback() {
  take_photo_feedback_ = 0;
}
inline ::mavsdk::rpc::camera_server::TakePhotoFeedback RespondTakePhotoRequest::_internal_take_photo_feedback() const {
  return static_cast< ::mavsdk::rpc::camera_server::TakePhotoFeedback >(take_photo_feedback_);
}
inline ::mavsdk::rpc::camera_server::TakePhotoFeedback RespondTakePhotoRequest::take_photo_feedback() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.RespondTakePhotoRequest.take_photo_feedback)
  return _internal_take_photo_feedback();
}
inline void RespondTakePhotoRequest::_internal_set_take_photo_feedback(::mavsdk::rpc::camera_server::TakePhotoFeedback value) {
  
  take_photo_feedback_ = value;
}
inline void RespondTakePhotoRequest::set_take_photo_feedback(::mavsdk::rpc::camera_server::TakePhotoFeedback value) {
  _internal_set_take_photo_feedback(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.RespondTakePhotoRequest.take_photo_feedback)
}

// .mavsdk.rpc.camera_server.CaptureInfo capture_info = 2;
inline bool RespondTakePhotoRequest::_internal_has_capture_info() const {
  return this != internal_default_instance() && capture_info_ != nullptr;
}
inline bool RespondTakePhotoRequest::has_capture_info() const {
  return _internal_has_capture_info();
}
inline void RespondTakePhotoRequest::clear_capture_info() {
  if (GetArenaForAllocation() == nullptr && capture_info_ != nullptr) {
    delete capture_info_;
  }
  capture_info_ = nullptr;
}
inline const ::mavsdk::rpc::camera_server::CaptureInfo& RespondTakePhotoRequest::_internal_capture_info() const {
  const ::mavsdk::rpc::camera_server::CaptureInfo* p = capture_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera_server::CaptureInfo&>(
      ::mavsdk::rpc::camera_server::_CaptureInfo_default_instance_);
}
inline const ::mavsdk::rpc::camera_server::CaptureInfo& RespondTakePhotoRequest::capture_info() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.RespondTakePhotoRequest.capture_info)
  return _internal_capture_info();
}
inline void RespondTakePhotoRequest::unsafe_arena_set_allocated_capture_info(
    ::mavsdk::rpc::camera_server::CaptureInfo* capture_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capture_info_);
  }
  capture_info_ = capture_info;
  if (capture_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera_server.RespondTakePhotoRequest.capture_info)
}
inline ::mavsdk::rpc::camera_server::CaptureInfo* RespondTakePhotoRequest::release_capture_info() {
  
  ::mavsdk::rpc::camera_server::CaptureInfo* temp = capture_info_;
  capture_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera_server::CaptureInfo* RespondTakePhotoRequest::unsafe_arena_release_capture_info() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.RespondTakePhotoRequest.capture_info)
  
  ::mavsdk::rpc::camera_server::CaptureInfo* temp = capture_info_;
  capture_info_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera_server::CaptureInfo* RespondTakePhotoRequest::_internal_mutable_capture_info() {
  
  if (capture_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera_server::CaptureInfo>(GetArenaForAllocation());
    capture_info_ = p;
  }
  return capture_info_;
}
inline ::mavsdk::rpc::camera_server::CaptureInfo* RespondTakePhotoRequest::mutable_capture_info() {
  ::mavsdk::rpc::camera_server::CaptureInfo* _msg = _internal_mutable_capture_info();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.RespondTakePhotoRequest.capture_info)
  return _msg;
}
inline void RespondTakePhotoRequest::set_allocated_capture_info(::mavsdk::rpc::camera_server::CaptureInfo* capture_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete capture_info_;
  }
  if (capture_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(capture_info);
    if (message_arena != submessage_arena) {
      capture_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capture_info, submessage_arena);
    }
    
  } else {
    
  }
  capture_info_ = capture_info;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.RespondTakePhotoRequest.capture_info)
}

// -------------------------------------------------------------------

// RespondTakePhotoResponse

// .mavsdk.rpc.camera_server.CameraServerResult camera_server_result = 1;
inline bool RespondTakePhotoResponse::_internal_has_camera_server_result() const {
  return this != internal_default_instance() && camera_server_result_ != nullptr;
}
inline bool RespondTakePhotoResponse::has_camera_server_result() const {
  return _internal_has_camera_server_result();
}
inline void RespondTakePhotoResponse::clear_camera_server_result() {
  if (GetArenaForAllocation() == nullptr && camera_server_result_ != nullptr) {
    delete camera_server_result_;
  }
  camera_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera_server::CameraServerResult& RespondTakePhotoResponse::_internal_camera_server_result() const {
  const ::mavsdk::rpc::camera_server::CameraServerResult* p = camera_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera_server::CameraServerResult&>(
      ::mavsdk::rpc::camera_server::_CameraServerResult_default_instance_);
}
inline const ::mavsdk::rpc::camera_server::CameraServerResult& RespondTakePhotoResponse::camera_server_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.RespondTakePhotoResponse.camera_server_result)
  return _internal_camera_server_result();
}
inline void RespondTakePhotoResponse::unsafe_arena_set_allocated_camera_server_result(
    ::mavsdk::rpc::camera_server::CameraServerResult* camera_server_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_server_result_);
  }
  camera_server_result_ = camera_server_result;
  if (camera_server_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera_server.RespondTakePhotoResponse.camera_server_result)
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* RespondTakePhotoResponse::release_camera_server_result() {
  
  ::mavsdk::rpc::camera_server::CameraServerResult* temp = camera_server_result_;
  camera_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* RespondTakePhotoResponse::unsafe_arena_release_camera_server_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.RespondTakePhotoResponse.camera_server_result)
  
  ::mavsdk::rpc::camera_server::CameraServerResult* temp = camera_server_result_;
  camera_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* RespondTakePhotoResponse::_internal_mutable_camera_server_result() {
  
  if (camera_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera_server::CameraServerResult>(GetArenaForAllocation());
    camera_server_result_ = p;
  }
  return camera_server_result_;
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* RespondTakePhotoResponse::mutable_camera_server_result() {
  ::mavsdk::rpc::camera_server::CameraServerResult* _msg = _internal_mutable_camera_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.RespondTakePhotoResponse.camera_server_result)
  return _msg;
}
inline void RespondTakePhotoResponse::set_allocated_camera_server_result(::mavsdk::rpc::camera_server::CameraServerResult* camera_server_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete camera_server_result_;
  }
  if (camera_server_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_server_result);
    if (message_arena != submessage_arena) {
      camera_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_server_result, submessage_arena);
    }
    
  } else {
    
  }
  camera_server_result_ = camera_server_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.RespondTakePhotoResponse.camera_server_result)
}

// -------------------------------------------------------------------

// Information

// string vendor_name = 1;
inline void Information::clear_vendor_name() {
  vendor_name_.ClearToEmpty();
}
inline const std::string& Information::vendor_name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Information.vendor_name)
  return _internal_vendor_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Information::set_vendor_name(ArgT0&& arg0, ArgT... args) {
 
 vendor_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Information.vendor_name)
}
inline std::string* Information::mutable_vendor_name() {
  std::string* _s = _internal_mutable_vendor_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.Information.vendor_name)
  return _s;
}
inline const std::string& Information::_internal_vendor_name() const {
  return vendor_name_.Get();
}
inline void Information::_internal_set_vendor_name(const std::string& value) {
  
  vendor_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Information::_internal_mutable_vendor_name() {
  
  return vendor_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Information::release_vendor_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.Information.vendor_name)
  return vendor_name_.Release();
}
inline void Information::set_allocated_vendor_name(std::string* vendor_name) {
  if (vendor_name != nullptr) {
    
  } else {
    
  }
  vendor_name_.SetAllocated(vendor_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vendor_name_.IsDefault()) {
    vendor_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.Information.vendor_name)
}

// string model_name = 2;
inline void Information::clear_model_name() {
  model_name_.ClearToEmpty();
}
inline const std::string& Information::model_name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Information.model_name)
  return _internal_model_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Information::set_model_name(ArgT0&& arg0, ArgT... args) {
 
 model_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Information.model_name)
}
inline std::string* Information::mutable_model_name() {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.Information.model_name)
  return _s;
}
inline const std::string& Information::_internal_model_name() const {
  return model_name_.Get();
}
inline void Information::_internal_set_model_name(const std::string& value) {
  
  model_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Information::_internal_mutable_model_name() {
  
  return model_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Information::release_model_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.Information.model_name)
  return model_name_.Release();
}
inline void Information::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  model_name_.SetAllocated(model_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_name_.IsDefault()) {
    model_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.Information.model_name)
}

// string firmware_version = 3;
inline void Information::clear_firmware_version() {
  firmware_version_.ClearToEmpty();
}
inline const std::string& Information::firmware_version() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Information.firmware_version)
  return _internal_firmware_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Information::set_firmware_version(ArgT0&& arg0, ArgT... args) {
 
 firmware_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Information.firmware_version)
}
inline std::string* Information::mutable_firmware_version() {
  std::string* _s = _internal_mutable_firmware_version();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.Information.firmware_version)
  return _s;
}
inline const std::string& Information::_internal_firmware_version() const {
  return firmware_version_.Get();
}
inline void Information::_internal_set_firmware_version(const std::string& value) {
  
  firmware_version_.Set(value, GetArenaForAllocation());
}
inline std::string* Information::_internal_mutable_firmware_version() {
  
  return firmware_version_.Mutable(GetArenaForAllocation());
}
inline std::string* Information::release_firmware_version() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.Information.firmware_version)
  return firmware_version_.Release();
}
inline void Information::set_allocated_firmware_version(std::string* firmware_version) {
  if (firmware_version != nullptr) {
    
  } else {
    
  }
  firmware_version_.SetAllocated(firmware_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (firmware_version_.IsDefault()) {
    firmware_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.Information.firmware_version)
}

// float focal_length_mm = 4;
inline void Information::clear_focal_length_mm() {
  focal_length_mm_ = 0;
}
inline float Information::_internal_focal_length_mm() const {
  return focal_length_mm_;
}
inline float Information::focal_length_mm() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Information.focal_length_mm)
  return _internal_focal_length_mm();
}
inline void Information::_internal_set_focal_length_mm(float value) {
  
  focal_length_mm_ = value;
}
inline void Information::set_focal_length_mm(float value) {
  _internal_set_focal_length_mm(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Information.focal_length_mm)
}

// float horizontal_sensor_size_mm = 5;
inline void Information::clear_horizontal_sensor_size_mm() {
  horizontal_sensor_size_mm_ = 0;
}
inline float Information::_internal_horizontal_sensor_size_mm() const {
  return horizontal_sensor_size_mm_;
}
inline float Information::horizontal_sensor_size_mm() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Information.horizontal_sensor_size_mm)
  return _internal_horizontal_sensor_size_mm();
}
inline void Information::_internal_set_horizontal_sensor_size_mm(float value) {
  
  horizontal_sensor_size_mm_ = value;
}
inline void Information::set_horizontal_sensor_size_mm(float value) {
  _internal_set_horizontal_sensor_size_mm(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Information.horizontal_sensor_size_mm)
}

// float vertical_sensor_size_mm = 6;
inline void Information::clear_vertical_sensor_size_mm() {
  vertical_sensor_size_mm_ = 0;
}
inline float Information::_internal_vertical_sensor_size_mm() const {
  return vertical_sensor_size_mm_;
}
inline float Information::vertical_sensor_size_mm() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Information.vertical_sensor_size_mm)
  return _internal_vertical_sensor_size_mm();
}
inline void Information::_internal_set_vertical_sensor_size_mm(float value) {
  
  vertical_sensor_size_mm_ = value;
}
inline void Information::set_vertical_sensor_size_mm(float value) {
  _internal_set_vertical_sensor_size_mm(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Information.vertical_sensor_size_mm)
}

// uint32 horizontal_resolution_px = 7;
inline void Information::clear_horizontal_resolution_px() {
  horizontal_resolution_px_ = 0u;
}
inline uint32_t Information::_internal_horizontal_resolution_px() const {
  return horizontal_resolution_px_;
}
inline uint32_t Information::horizontal_resolution_px() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Information.horizontal_resolution_px)
  return _internal_horizontal_resolution_px();
}
inline void Information::_internal_set_horizontal_resolution_px(uint32_t value) {
  
  horizontal_resolution_px_ = value;
}
inline void Information::set_horizontal_resolution_px(uint32_t value) {
  _internal_set_horizontal_resolution_px(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Information.horizontal_resolution_px)
}

// uint32 vertical_resolution_px = 8;
inline void Information::clear_vertical_resolution_px() {
  vertical_resolution_px_ = 0u;
}
inline uint32_t Information::_internal_vertical_resolution_px() const {
  return vertical_resolution_px_;
}
inline uint32_t Information::vertical_resolution_px() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Information.vertical_resolution_px)
  return _internal_vertical_resolution_px();
}
inline void Information::_internal_set_vertical_resolution_px(uint32_t value) {
  
  vertical_resolution_px_ = value;
}
inline void Information::set_vertical_resolution_px(uint32_t value) {
  _internal_set_vertical_resolution_px(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Information.vertical_resolution_px)
}

// uint32 lens_id = 9;
inline void Information::clear_lens_id() {
  lens_id_ = 0u;
}
inline uint32_t Information::_internal_lens_id() const {
  return lens_id_;
}
inline uint32_t Information::lens_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Information.lens_id)
  return _internal_lens_id();
}
inline void Information::_internal_set_lens_id(uint32_t value) {
  
  lens_id_ = value;
}
inline void Information::set_lens_id(uint32_t value) {
  _internal_set_lens_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Information.lens_id)
}

// uint32 definition_file_version = 10;
inline void Information::clear_definition_file_version() {
  definition_file_version_ = 0u;
}
inline uint32_t Information::_internal_definition_file_version() const {
  return definition_file_version_;
}
inline uint32_t Information::definition_file_version() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Information.definition_file_version)
  return _internal_definition_file_version();
}
inline void Information::_internal_set_definition_file_version(uint32_t value) {
  
  definition_file_version_ = value;
}
inline void Information::set_definition_file_version(uint32_t value) {
  _internal_set_definition_file_version(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Information.definition_file_version)
}

// string definition_file_uri = 11;
inline void Information::clear_definition_file_uri() {
  definition_file_uri_.ClearToEmpty();
}
inline const std::string& Information::definition_file_uri() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Information.definition_file_uri)
  return _internal_definition_file_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Information::set_definition_file_uri(ArgT0&& arg0, ArgT... args) {
 
 definition_file_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Information.definition_file_uri)
}
inline std::string* Information::mutable_definition_file_uri() {
  std::string* _s = _internal_mutable_definition_file_uri();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.Information.definition_file_uri)
  return _s;
}
inline const std::string& Information::_internal_definition_file_uri() const {
  return definition_file_uri_.Get();
}
inline void Information::_internal_set_definition_file_uri(const std::string& value) {
  
  definition_file_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* Information::_internal_mutable_definition_file_uri() {
  
  return definition_file_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* Information::release_definition_file_uri() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.Information.definition_file_uri)
  return definition_file_uri_.Release();
}
inline void Information::set_allocated_definition_file_uri(std::string* definition_file_uri) {
  if (definition_file_uri != nullptr) {
    
  } else {
    
  }
  definition_file_uri_.SetAllocated(definition_file_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (definition_file_uri_.IsDefault()) {
    definition_file_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.Information.definition_file_uri)
}

// -------------------------------------------------------------------

// Position

// double latitude_deg = 1;
inline void Position::clear_latitude_deg() {
  latitude_deg_ = 0;
}
inline double Position::_internal_latitude_deg() const {
  return latitude_deg_;
}
inline double Position::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Position.latitude_deg)
  return _internal_latitude_deg();
}
inline void Position::_internal_set_latitude_deg(double value) {
  
  latitude_deg_ = value;
}
inline void Position::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Position.latitude_deg)
}

// double longitude_deg = 2;
inline void Position::clear_longitude_deg() {
  longitude_deg_ = 0;
}
inline double Position::_internal_longitude_deg() const {
  return longitude_deg_;
}
inline double Position::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Position.longitude_deg)
  return _internal_longitude_deg();
}
inline void Position::_internal_set_longitude_deg(double value) {
  
  longitude_deg_ = value;
}
inline void Position::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Position.longitude_deg)
}

// float absolute_altitude_m = 3;
inline void Position::clear_absolute_altitude_m() {
  absolute_altitude_m_ = 0;
}
inline float Position::_internal_absolute_altitude_m() const {
  return absolute_altitude_m_;
}
inline float Position::absolute_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Position.absolute_altitude_m)
  return _internal_absolute_altitude_m();
}
inline void Position::_internal_set_absolute_altitude_m(float value) {
  
  absolute_altitude_m_ = value;
}
inline void Position::set_absolute_altitude_m(float value) {
  _internal_set_absolute_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Position.absolute_altitude_m)
}

// float relative_altitude_m = 4;
inline void Position::clear_relative_altitude_m() {
  relative_altitude_m_ = 0;
}
inline float Position::_internal_relative_altitude_m() const {
  return relative_altitude_m_;
}
inline float Position::relative_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Position.relative_altitude_m)
  return _internal_relative_altitude_m();
}
inline void Position::_internal_set_relative_altitude_m(float value) {
  
  relative_altitude_m_ = value;
}
inline void Position::set_relative_altitude_m(float value) {
  _internal_set_relative_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Position.relative_altitude_m)
}

// -------------------------------------------------------------------

// Quaternion

// float w = 1;
inline void Quaternion::clear_w() {
  w_ = 0;
}
inline float Quaternion::_internal_w() const {
  return w_;
}
inline float Quaternion::w() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Quaternion.w)
  return _internal_w();
}
inline void Quaternion::_internal_set_w(float value) {
  
  w_ = value;
}
inline void Quaternion::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Quaternion.w)
}

// float x = 2;
inline void Quaternion::clear_x() {
  x_ = 0;
}
inline float Quaternion::_internal_x() const {
  return x_;
}
inline float Quaternion::x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Quaternion.x)
  return _internal_x();
}
inline void Quaternion::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Quaternion::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Quaternion.x)
}

// float y = 3;
inline void Quaternion::clear_y() {
  y_ = 0;
}
inline float Quaternion::_internal_y() const {
  return y_;
}
inline float Quaternion::y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Quaternion.y)
  return _internal_y();
}
inline void Quaternion::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Quaternion::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Quaternion.y)
}

// float z = 4;
inline void Quaternion::clear_z() {
  z_ = 0;
}
inline float Quaternion::_internal_z() const {
  return z_;
}
inline float Quaternion::z() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Quaternion.z)
  return _internal_z();
}
inline void Quaternion::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Quaternion::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Quaternion.z)
}

// -------------------------------------------------------------------

// CaptureInfo

// .mavsdk.rpc.camera_server.Position position = 1;
inline bool CaptureInfo::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool CaptureInfo::has_position() const {
  return _internal_has_position();
}
inline void CaptureInfo::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::mavsdk::rpc::camera_server::Position& CaptureInfo::_internal_position() const {
  const ::mavsdk::rpc::camera_server::Position* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera_server::Position&>(
      ::mavsdk::rpc::camera_server::_Position_default_instance_);
}
inline const ::mavsdk::rpc::camera_server::Position& CaptureInfo::position() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.CaptureInfo.position)
  return _internal_position();
}
inline void CaptureInfo::unsafe_arena_set_allocated_position(
    ::mavsdk::rpc::camera_server::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera_server.CaptureInfo.position)
}
inline ::mavsdk::rpc::camera_server::Position* CaptureInfo::release_position() {
  
  ::mavsdk::rpc::camera_server::Position* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera_server::Position* CaptureInfo::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.CaptureInfo.position)
  
  ::mavsdk::rpc::camera_server::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera_server::Position* CaptureInfo::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera_server::Position>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::mavsdk::rpc::camera_server::Position* CaptureInfo::mutable_position() {
  ::mavsdk::rpc::camera_server::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.CaptureInfo.position)
  return _msg;
}
inline void CaptureInfo::set_allocated_position(::mavsdk::rpc::camera_server::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.CaptureInfo.position)
}

// .mavsdk.rpc.camera_server.Quaternion attitude_quaternion = 2;
inline bool CaptureInfo::_internal_has_attitude_quaternion() const {
  return this != internal_default_instance() && attitude_quaternion_ != nullptr;
}
inline bool CaptureInfo::has_attitude_quaternion() const {
  return _internal_has_attitude_quaternion();
}
inline void CaptureInfo::clear_attitude_quaternion() {
  if (GetArenaForAllocation() == nullptr && attitude_quaternion_ != nullptr) {
    delete attitude_quaternion_;
  }
  attitude_quaternion_ = nullptr;
}
inline const ::mavsdk::rpc::camera_server::Quaternion& CaptureInfo::_internal_attitude_quaternion() const {
  const ::mavsdk::rpc::camera_server::Quaternion* p = attitude_quaternion_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera_server::Quaternion&>(
      ::mavsdk::rpc::camera_server::_Quaternion_default_instance_);
}
inline const ::mavsdk::rpc::camera_server::Quaternion& CaptureInfo::attitude_quaternion() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.CaptureInfo.attitude_quaternion)
  return _internal_attitude_quaternion();
}
inline void CaptureInfo::unsafe_arena_set_allocated_attitude_quaternion(
    ::mavsdk::rpc::camera_server::Quaternion* attitude_quaternion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attitude_quaternion_);
  }
  attitude_quaternion_ = attitude_quaternion;
  if (attitude_quaternion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera_server.CaptureInfo.attitude_quaternion)
}
inline ::mavsdk::rpc::camera_server::Quaternion* CaptureInfo::release_attitude_quaternion() {
  
  ::mavsdk::rpc::camera_server::Quaternion* temp = attitude_quaternion_;
  attitude_quaternion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera_server::Quaternion* CaptureInfo::unsafe_arena_release_attitude_quaternion() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.CaptureInfo.attitude_quaternion)
  
  ::mavsdk::rpc::camera_server::Quaternion* temp = attitude_quaternion_;
  attitude_quaternion_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera_server::Quaternion* CaptureInfo::_internal_mutable_attitude_quaternion() {
  
  if (attitude_quaternion_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera_server::Quaternion>(GetArenaForAllocation());
    attitude_quaternion_ = p;
  }
  return attitude_quaternion_;
}
inline ::mavsdk::rpc::camera_server::Quaternion* CaptureInfo::mutable_attitude_quaternion() {
  ::mavsdk::rpc::camera_server::Quaternion* _msg = _internal_mutable_attitude_quaternion();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.CaptureInfo.attitude_quaternion)
  return _msg;
}
inline void CaptureInfo::set_allocated_attitude_quaternion(::mavsdk::rpc::camera_server::Quaternion* attitude_quaternion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attitude_quaternion_;
  }
  if (attitude_quaternion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attitude_quaternion);
    if (message_arena != submessage_arena) {
      attitude_quaternion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude_quaternion, submessage_arena);
    }
    
  } else {
    
  }
  attitude_quaternion_ = attitude_quaternion;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.CaptureInfo.attitude_quaternion)
}

// uint64 time_utc_us = 3;
inline void CaptureInfo::clear_time_utc_us() {
  time_utc_us_ = uint64_t{0u};
}
inline uint64_t CaptureInfo::_internal_time_utc_us() const {
  return time_utc_us_;
}
inline uint64_t CaptureInfo::time_utc_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.CaptureInfo.time_utc_us)
  return _internal_time_utc_us();
}
inline void CaptureInfo::_internal_set_time_utc_us(uint64_t value) {
  
  time_utc_us_ = value;
}
inline void CaptureInfo::set_time_utc_us(uint64_t value) {
  _internal_set_time_utc_us(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.CaptureInfo.time_utc_us)
}

// bool is_success = 4;
inline void CaptureInfo::clear_is_success() {
  is_success_ = false;
}
inline bool CaptureInfo::_internal_is_success() const {
  return is_success_;
}
inline bool CaptureInfo::is_success() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.CaptureInfo.is_success)
  return _internal_is_success();
}
inline void CaptureInfo::_internal_set_is_success(bool value) {
  
  is_success_ = value;
}
inline void CaptureInfo::set_is_success(bool value) {
  _internal_set_is_success(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.CaptureInfo.is_success)
}

// int32 index = 5;
inline void CaptureInfo::clear_index() {
  index_ = 0;
}
inline int32_t CaptureInfo::_internal_index() const {
  return index_;
}
inline int32_t CaptureInfo::index() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.CaptureInfo.index)
  return _internal_index();
}
inline void CaptureInfo::_internal_set_index(int32_t value) {
  
  index_ = value;
}
inline void CaptureInfo::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.CaptureInfo.index)
}

// string file_url = 6;
inline void CaptureInfo::clear_file_url() {
  file_url_.ClearToEmpty();
}
inline const std::string& CaptureInfo::file_url() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.CaptureInfo.file_url)
  return _internal_file_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureInfo::set_file_url(ArgT0&& arg0, ArgT... args) {
 
 file_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.CaptureInfo.file_url)
}
inline std::string* CaptureInfo::mutable_file_url() {
  std::string* _s = _internal_mutable_file_url();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.CaptureInfo.file_url)
  return _s;
}
inline const std::string& CaptureInfo::_internal_file_url() const {
  return file_url_.Get();
}
inline void CaptureInfo::_internal_set_file_url(const std::string& value) {
  
  file_url_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureInfo::_internal_mutable_file_url() {
  
  return file_url_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureInfo::release_file_url() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.CaptureInfo.file_url)
  return file_url_.Release();
}
inline void CaptureInfo::set_allocated_file_url(std::string* file_url) {
  if (file_url != nullptr) {
    
  } else {
    
  }
  file_url_.SetAllocated(file_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_url_.IsDefault()) {
    file_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.CaptureInfo.file_url)
}

// -------------------------------------------------------------------

// CameraServerResult

// .mavsdk.rpc.camera_server.CameraServerResult.Result result = 1;
inline void CameraServerResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::camera_server::CameraServerResult_Result CameraServerResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::camera_server::CameraServerResult_Result >(result_);
}
inline ::mavsdk::rpc::camera_server::CameraServerResult_Result CameraServerResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.CameraServerResult.result)
  return _internal_result();
}
inline void CameraServerResult::_internal_set_result(::mavsdk::rpc::camera_server::CameraServerResult_Result value) {
  
  result_ = value;
}
inline void CameraServerResult::set_result(::mavsdk::rpc::camera_server::CameraServerResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.CameraServerResult.result)
}

// string result_str = 2;
inline void CameraServerResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& CameraServerResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.CameraServerResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CameraServerResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 result_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.CameraServerResult.result_str)
}
inline std::string* CameraServerResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.CameraServerResult.result_str)
  return _s;
}
inline const std::string& CameraServerResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void CameraServerResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraServerResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(GetArenaForAllocation());
}
inline std::string* CameraServerResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.CameraServerResult.result_str)
  return result_str_.Release();
}
inline void CameraServerResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(result_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_str_.IsDefault()) {
    result_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.CameraServerResult.result_str)
}

// -------------------------------------------------------------------

// SubscribeStartVideoRequest

// -------------------------------------------------------------------

// StartVideoResponse

// int32 stream_id = 1;
inline void StartVideoResponse::clear_stream_id() {
  stream_id_ = 0;
}
inline int32_t StartVideoResponse::_internal_stream_id() const {
  return stream_id_;
}
inline int32_t StartVideoResponse::stream_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.StartVideoResponse.stream_id)
  return _internal_stream_id();
}
inline void StartVideoResponse::_internal_set_stream_id(int32_t value) {
  
  stream_id_ = value;
}
inline void StartVideoResponse::set_stream_id(int32_t value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.StartVideoResponse.stream_id)
}

// -------------------------------------------------------------------

// SubscribeStopVideoRequest

// -------------------------------------------------------------------

// StopVideoResponse

// int32 stream_id = 1;
inline void StopVideoResponse::clear_stream_id() {
  stream_id_ = 0;
}
inline int32_t StopVideoResponse::_internal_stream_id() const {
  return stream_id_;
}
inline int32_t StopVideoResponse::stream_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.StopVideoResponse.stream_id)
  return _internal_stream_id();
}
inline void StopVideoResponse::_internal_set_stream_id(int32_t value) {
  
  stream_id_ = value;
}
inline void StopVideoResponse::set_stream_id(int32_t value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.StopVideoResponse.stream_id)
}

// -------------------------------------------------------------------

// SubscribeStartVideoStreamingRequest

// -------------------------------------------------------------------

// StartVideoStreamingResponse

// int32 stream_id = 1;
inline void StartVideoStreamingResponse::clear_stream_id() {
  stream_id_ = 0;
}
inline int32_t StartVideoStreamingResponse::_internal_stream_id() const {
  return stream_id_;
}
inline int32_t StartVideoStreamingResponse::stream_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.StartVideoStreamingResponse.stream_id)
  return _internal_stream_id();
}
inline void StartVideoStreamingResponse::_internal_set_stream_id(int32_t value) {
  
  stream_id_ = value;
}
inline void StartVideoStreamingResponse::set_stream_id(int32_t value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.StartVideoStreamingResponse.stream_id)
}

// -------------------------------------------------------------------

// SubscribeStopVideoStreamingRequest

// -------------------------------------------------------------------

// StopVideoStreamingResponse

// int32 stream_id = 1;
inline void StopVideoStreamingResponse::clear_stream_id() {
  stream_id_ = 0;
}
inline int32_t StopVideoStreamingResponse::_internal_stream_id() const {
  return stream_id_;
}
inline int32_t StopVideoStreamingResponse::stream_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.StopVideoStreamingResponse.stream_id)
  return _internal_stream_id();
}
inline void StopVideoStreamingResponse::_internal_set_stream_id(int32_t value) {
  
  stream_id_ = value;
}
inline void StopVideoStreamingResponse::set_stream_id(int32_t value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.StopVideoStreamingResponse.stream_id)
}

// -------------------------------------------------------------------

// SubscribeSetModeRequest

// -------------------------------------------------------------------

// SetModeResponse

// .mavsdk.rpc.camera_server.Mode mode = 1;
inline void SetModeResponse::clear_mode() {
  mode_ = 0;
}
inline ::mavsdk::rpc::camera_server::Mode SetModeResponse::_internal_mode() const {
  return static_cast< ::mavsdk::rpc::camera_server::Mode >(mode_);
}
inline ::mavsdk::rpc::camera_server::Mode SetModeResponse::mode() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.SetModeResponse.mode)
  return _internal_mode();
}
inline void SetModeResponse::_internal_set_mode(::mavsdk::rpc::camera_server::Mode value) {
  
  mode_ = value;
}
inline void SetModeResponse::set_mode(::mavsdk::rpc::camera_server::Mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.SetModeResponse.mode)
}

// -------------------------------------------------------------------

// SubscribeStorageInformationRequest

// -------------------------------------------------------------------

// StorageInformationResponse

// int32 storage_id = 1;
inline void StorageInformationResponse::clear_storage_id() {
  storage_id_ = 0;
}
inline int32_t StorageInformationResponse::_internal_storage_id() const {
  return storage_id_;
}
inline int32_t StorageInformationResponse::storage_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.StorageInformationResponse.storage_id)
  return _internal_storage_id();
}
inline void StorageInformationResponse::_internal_set_storage_id(int32_t value) {
  
  storage_id_ = value;
}
inline void StorageInformationResponse::set_storage_id(int32_t value) {
  _internal_set_storage_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.StorageInformationResponse.storage_id)
}

// -------------------------------------------------------------------

// StorageInformation

// float used_storage_mib = 1;
inline void StorageInformation::clear_used_storage_mib() {
  used_storage_mib_ = 0;
}
inline float StorageInformation::_internal_used_storage_mib() const {
  return used_storage_mib_;
}
inline float StorageInformation::used_storage_mib() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.StorageInformation.used_storage_mib)
  return _internal_used_storage_mib();
}
inline void StorageInformation::_internal_set_used_storage_mib(float value) {
  
  used_storage_mib_ = value;
}
inline void StorageInformation::set_used_storage_mib(float value) {
  _internal_set_used_storage_mib(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.StorageInformation.used_storage_mib)
}

// float available_storage_mib = 2;
inline void StorageInformation::clear_available_storage_mib() {
  available_storage_mib_ = 0;
}
inline float StorageInformation::_internal_available_storage_mib() const {
  return available_storage_mib_;
}
inline float StorageInformation::available_storage_mib() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.StorageInformation.available_storage_mib)
  return _internal_available_storage_mib();
}
inline void StorageInformation::_internal_set_available_storage_mib(float value) {
  
  available_storage_mib_ = value;
}
inline void StorageInformation::set_available_storage_mib(float value) {
  _internal_set_available_storage_mib(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.StorageInformation.available_storage_mib)
}

// float total_storage_mib = 3;
inline void StorageInformation::clear_total_storage_mib() {
  total_storage_mib_ = 0;
}
inline float StorageInformation::_internal_total_storage_mib() const {
  return total_storage_mib_;
}
inline float StorageInformation::total_storage_mib() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.StorageInformation.total_storage_mib)
  return _internal_total_storage_mib();
}
inline void StorageInformation::_internal_set_total_storage_mib(float value) {
  
  total_storage_mib_ = value;
}
inline void StorageInformation::set_total_storage_mib(float value) {
  _internal_set_total_storage_mib(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.StorageInformation.total_storage_mib)
}

// .mavsdk.rpc.camera_server.StorageInformation.StorageStatus storage_status = 4;
inline void StorageInformation::clear_storage_status() {
  storage_status_ = 0;
}
inline ::mavsdk::rpc::camera_server::StorageInformation_StorageStatus StorageInformation::_internal_storage_status() const {
  return static_cast< ::mavsdk::rpc::camera_server::StorageInformation_StorageStatus >(storage_status_);
}
inline ::mavsdk::rpc::camera_server::StorageInformation_StorageStatus StorageInformation::storage_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.StorageInformation.storage_status)
  return _internal_storage_status();
}
inline void StorageInformation::_internal_set_storage_status(::mavsdk::rpc::camera_server::StorageInformation_StorageStatus value) {
  
  storage_status_ = value;
}
inline void StorageInformation::set_storage_status(::mavsdk::rpc::camera_server::StorageInformation_StorageStatus value) {
  _internal_set_storage_status(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.StorageInformation.storage_status)
}

// uint32 storage_id = 5;
inline void StorageInformation::clear_storage_id() {
  storage_id_ = 0u;
}
inline uint32_t StorageInformation::_internal_storage_id() const {
  return storage_id_;
}
inline uint32_t StorageInformation::storage_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.StorageInformation.storage_id)
  return _internal_storage_id();
}
inline void StorageInformation::_internal_set_storage_id(uint32_t value) {
  
  storage_id_ = value;
}
inline void StorageInformation::set_storage_id(uint32_t value) {
  _internal_set_storage_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.StorageInformation.storage_id)
}

// .mavsdk.rpc.camera_server.StorageInformation.StorageType storage_type = 6;
inline void StorageInformation::clear_storage_type() {
  storage_type_ = 0;
}
inline ::mavsdk::rpc::camera_server::StorageInformation_StorageType StorageInformation::_internal_storage_type() const {
  return static_cast< ::mavsdk::rpc::camera_server::StorageInformation_StorageType >(storage_type_);
}
inline ::mavsdk::rpc::camera_server::StorageInformation_StorageType StorageInformation::storage_type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.StorageInformation.storage_type)
  return _internal_storage_type();
}
inline void StorageInformation::_internal_set_storage_type(::mavsdk::rpc::camera_server::StorageInformation_StorageType value) {
  
  storage_type_ = value;
}
inline void StorageInformation::set_storage_type(::mavsdk::rpc::camera_server::StorageInformation_StorageType value) {
  _internal_set_storage_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.StorageInformation.storage_type)
}

// float read_speed = 7;
inline void StorageInformation::clear_read_speed() {
  read_speed_ = 0;
}
inline float StorageInformation::_internal_read_speed() const {
  return read_speed_;
}
inline float StorageInformation::read_speed() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.StorageInformation.read_speed)
  return _internal_read_speed();
}
inline void StorageInformation::_internal_set_read_speed(float value) {
  
  read_speed_ = value;
}
inline void StorageInformation::set_read_speed(float value) {
  _internal_set_read_speed(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.StorageInformation.read_speed)
}

// float write_speed = 8;
inline void StorageInformation::clear_write_speed() {
  write_speed_ = 0;
}
inline float StorageInformation::_internal_write_speed() const {
  return write_speed_;
}
inline float StorageInformation::write_speed() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.StorageInformation.write_speed)
  return _internal_write_speed();
}
inline void StorageInformation::_internal_set_write_speed(float value) {
  
  write_speed_ = value;
}
inline void StorageInformation::set_write_speed(float value) {
  _internal_set_write_speed(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.StorageInformation.write_speed)
}

// -------------------------------------------------------------------

// RespondStorageInformationRequest

// .mavsdk.rpc.camera_server.StorageInformation storage_information = 1;
inline bool RespondStorageInformationRequest::_internal_has_storage_information() const {
  return this != internal_default_instance() && storage_information_ != nullptr;
}
inline bool RespondStorageInformationRequest::has_storage_information() const {
  return _internal_has_storage_information();
}
inline void RespondStorageInformationRequest::clear_storage_information() {
  if (GetArenaForAllocation() == nullptr && storage_information_ != nullptr) {
    delete storage_information_;
  }
  storage_information_ = nullptr;
}
inline const ::mavsdk::rpc::camera_server::StorageInformation& RespondStorageInformationRequest::_internal_storage_information() const {
  const ::mavsdk::rpc::camera_server::StorageInformation* p = storage_information_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera_server::StorageInformation&>(
      ::mavsdk::rpc::camera_server::_StorageInformation_default_instance_);
}
inline const ::mavsdk::rpc::camera_server::StorageInformation& RespondStorageInformationRequest::storage_information() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.RespondStorageInformationRequest.storage_information)
  return _internal_storage_information();
}
inline void RespondStorageInformationRequest::unsafe_arena_set_allocated_storage_information(
    ::mavsdk::rpc::camera_server::StorageInformation* storage_information) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_information_);
  }
  storage_information_ = storage_information;
  if (storage_information) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera_server.RespondStorageInformationRequest.storage_information)
}
inline ::mavsdk::rpc::camera_server::StorageInformation* RespondStorageInformationRequest::release_storage_information() {
  
  ::mavsdk::rpc::camera_server::StorageInformation* temp = storage_information_;
  storage_information_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera_server::StorageInformation* RespondStorageInformationRequest::unsafe_arena_release_storage_information() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.RespondStorageInformationRequest.storage_information)
  
  ::mavsdk::rpc::camera_server::StorageInformation* temp = storage_information_;
  storage_information_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera_server::StorageInformation* RespondStorageInformationRequest::_internal_mutable_storage_information() {
  
  if (storage_information_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera_server::StorageInformation>(GetArenaForAllocation());
    storage_information_ = p;
  }
  return storage_information_;
}
inline ::mavsdk::rpc::camera_server::StorageInformation* RespondStorageInformationRequest::mutable_storage_information() {
  ::mavsdk::rpc::camera_server::StorageInformation* _msg = _internal_mutable_storage_information();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.RespondStorageInformationRequest.storage_information)
  return _msg;
}
inline void RespondStorageInformationRequest::set_allocated_storage_information(::mavsdk::rpc::camera_server::StorageInformation* storage_information) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete storage_information_;
  }
  if (storage_information) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(storage_information);
    if (message_arena != submessage_arena) {
      storage_information = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_information, submessage_arena);
    }
    
  } else {
    
  }
  storage_information_ = storage_information;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.RespondStorageInformationRequest.storage_information)
}

// -------------------------------------------------------------------

// RespondStorageInformationResponse

// .mavsdk.rpc.camera_server.CameraServerResult camera_server_result = 1;
inline bool RespondStorageInformationResponse::_internal_has_camera_server_result() const {
  return this != internal_default_instance() && camera_server_result_ != nullptr;
}
inline bool RespondStorageInformationResponse::has_camera_server_result() const {
  return _internal_has_camera_server_result();
}
inline void RespondStorageInformationResponse::clear_camera_server_result() {
  if (GetArenaForAllocation() == nullptr && camera_server_result_ != nullptr) {
    delete camera_server_result_;
  }
  camera_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera_server::CameraServerResult& RespondStorageInformationResponse::_internal_camera_server_result() const {
  const ::mavsdk::rpc::camera_server::CameraServerResult* p = camera_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera_server::CameraServerResult&>(
      ::mavsdk::rpc::camera_server::_CameraServerResult_default_instance_);
}
inline const ::mavsdk::rpc::camera_server::CameraServerResult& RespondStorageInformationResponse::camera_server_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.RespondStorageInformationResponse.camera_server_result)
  return _internal_camera_server_result();
}
inline void RespondStorageInformationResponse::unsafe_arena_set_allocated_camera_server_result(
    ::mavsdk::rpc::camera_server::CameraServerResult* camera_server_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_server_result_);
  }
  camera_server_result_ = camera_server_result;
  if (camera_server_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera_server.RespondStorageInformationResponse.camera_server_result)
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* RespondStorageInformationResponse::release_camera_server_result() {
  
  ::mavsdk::rpc::camera_server::CameraServerResult* temp = camera_server_result_;
  camera_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* RespondStorageInformationResponse::unsafe_arena_release_camera_server_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.RespondStorageInformationResponse.camera_server_result)
  
  ::mavsdk::rpc::camera_server::CameraServerResult* temp = camera_server_result_;
  camera_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* RespondStorageInformationResponse::_internal_mutable_camera_server_result() {
  
  if (camera_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera_server::CameraServerResult>(GetArenaForAllocation());
    camera_server_result_ = p;
  }
  return camera_server_result_;
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* RespondStorageInformationResponse::mutable_camera_server_result() {
  ::mavsdk::rpc::camera_server::CameraServerResult* _msg = _internal_mutable_camera_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.RespondStorageInformationResponse.camera_server_result)
  return _msg;
}
inline void RespondStorageInformationResponse::set_allocated_camera_server_result(::mavsdk::rpc::camera_server::CameraServerResult* camera_server_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete camera_server_result_;
  }
  if (camera_server_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_server_result);
    if (message_arena != submessage_arena) {
      camera_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_server_result, submessage_arena);
    }
    
  } else {
    
  }
  camera_server_result_ = camera_server_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.RespondStorageInformationResponse.camera_server_result)
}

// -------------------------------------------------------------------

// SubscribeCaptureStatusRequest

// -------------------------------------------------------------------

// CaptureStatusResponse

// int32 reserved = 1;
inline void CaptureStatusResponse::clear_reserved() {
  reserved_ = 0;
}
inline int32_t CaptureStatusResponse::_internal_reserved() const {
  return reserved_;
}
inline int32_t CaptureStatusResponse::reserved() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.CaptureStatusResponse.reserved)
  return _internal_reserved();
}
inline void CaptureStatusResponse::_internal_set_reserved(int32_t value) {
  
  reserved_ = value;
}
inline void CaptureStatusResponse::set_reserved(int32_t value) {
  _internal_set_reserved(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.CaptureStatusResponse.reserved)
}

// -------------------------------------------------------------------

// CaptureStatus

// float image_interval = 1;
inline void CaptureStatus::clear_image_interval() {
  image_interval_ = 0;
}
inline float CaptureStatus::_internal_image_interval() const {
  return image_interval_;
}
inline float CaptureStatus::image_interval() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.CaptureStatus.image_interval)
  return _internal_image_interval();
}
inline void CaptureStatus::_internal_set_image_interval(float value) {
  
  image_interval_ = value;
}
inline void CaptureStatus::set_image_interval(float value) {
  _internal_set_image_interval(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.CaptureStatus.image_interval)
}

// float recording_time_s = 2;
inline void CaptureStatus::clear_recording_time_s() {
  recording_time_s_ = 0;
}
inline float CaptureStatus::_internal_recording_time_s() const {
  return recording_time_s_;
}
inline float CaptureStatus::recording_time_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.CaptureStatus.recording_time_s)
  return _internal_recording_time_s();
}
inline void CaptureStatus::_internal_set_recording_time_s(float value) {
  
  recording_time_s_ = value;
}
inline void CaptureStatus::set_recording_time_s(float value) {
  _internal_set_recording_time_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.CaptureStatus.recording_time_s)
}

// float available_capacity = 3;
inline void CaptureStatus::clear_available_capacity() {
  available_capacity_ = 0;
}
inline float CaptureStatus::_internal_available_capacity() const {
  return available_capacity_;
}
inline float CaptureStatus::available_capacity() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.CaptureStatus.available_capacity)
  return _internal_available_capacity();
}
inline void CaptureStatus::_internal_set_available_capacity(float value) {
  
  available_capacity_ = value;
}
inline void CaptureStatus::set_available_capacity(float value) {
  _internal_set_available_capacity(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.CaptureStatus.available_capacity)
}

// .mavsdk.rpc.camera_server.CaptureStatus.ImageStatus image_status = 4;
inline void CaptureStatus::clear_image_status() {
  image_status_ = 0;
}
inline ::mavsdk::rpc::camera_server::CaptureStatus_ImageStatus CaptureStatus::_internal_image_status() const {
  return static_cast< ::mavsdk::rpc::camera_server::CaptureStatus_ImageStatus >(image_status_);
}
inline ::mavsdk::rpc::camera_server::CaptureStatus_ImageStatus CaptureStatus::image_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.CaptureStatus.image_status)
  return _internal_image_status();
}
inline void CaptureStatus::_internal_set_image_status(::mavsdk::rpc::camera_server::CaptureStatus_ImageStatus value) {
  
  image_status_ = value;
}
inline void CaptureStatus::set_image_status(::mavsdk::rpc::camera_server::CaptureStatus_ImageStatus value) {
  _internal_set_image_status(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.CaptureStatus.image_status)
}

// .mavsdk.rpc.camera_server.CaptureStatus.VideoStatus video_status = 5;
inline void CaptureStatus::clear_video_status() {
  video_status_ = 0;
}
inline ::mavsdk::rpc::camera_server::CaptureStatus_VideoStatus CaptureStatus::_internal_video_status() const {
  return static_cast< ::mavsdk::rpc::camera_server::CaptureStatus_VideoStatus >(video_status_);
}
inline ::mavsdk::rpc::camera_server::CaptureStatus_VideoStatus CaptureStatus::video_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.CaptureStatus.video_status)
  return _internal_video_status();
}
inline void CaptureStatus::_internal_set_video_status(::mavsdk::rpc::camera_server::CaptureStatus_VideoStatus value) {
  
  video_status_ = value;
}
inline void CaptureStatus::set_video_status(::mavsdk::rpc::camera_server::CaptureStatus_VideoStatus value) {
  _internal_set_video_status(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.CaptureStatus.video_status)
}

// int32 image_count = 6;
inline void CaptureStatus::clear_image_count() {
  image_count_ = 0;
}
inline int32_t CaptureStatus::_internal_image_count() const {
  return image_count_;
}
inline int32_t CaptureStatus::image_count() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.CaptureStatus.image_count)
  return _internal_image_count();
}
inline void CaptureStatus::_internal_set_image_count(int32_t value) {
  
  image_count_ = value;
}
inline void CaptureStatus::set_image_count(int32_t value) {
  _internal_set_image_count(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.CaptureStatus.image_count)
}

// -------------------------------------------------------------------

// RespondCaptureStatusRequest

// .mavsdk.rpc.camera_server.CaptureStatus capture_status = 1;
inline bool RespondCaptureStatusRequest::_internal_has_capture_status() const {
  return this != internal_default_instance() && capture_status_ != nullptr;
}
inline bool RespondCaptureStatusRequest::has_capture_status() const {
  return _internal_has_capture_status();
}
inline void RespondCaptureStatusRequest::clear_capture_status() {
  if (GetArenaForAllocation() == nullptr && capture_status_ != nullptr) {
    delete capture_status_;
  }
  capture_status_ = nullptr;
}
inline const ::mavsdk::rpc::camera_server::CaptureStatus& RespondCaptureStatusRequest::_internal_capture_status() const {
  const ::mavsdk::rpc::camera_server::CaptureStatus* p = capture_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera_server::CaptureStatus&>(
      ::mavsdk::rpc::camera_server::_CaptureStatus_default_instance_);
}
inline const ::mavsdk::rpc::camera_server::CaptureStatus& RespondCaptureStatusRequest::capture_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.RespondCaptureStatusRequest.capture_status)
  return _internal_capture_status();
}
inline void RespondCaptureStatusRequest::unsafe_arena_set_allocated_capture_status(
    ::mavsdk::rpc::camera_server::CaptureStatus* capture_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capture_status_);
  }
  capture_status_ = capture_status;
  if (capture_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera_server.RespondCaptureStatusRequest.capture_status)
}
inline ::mavsdk::rpc::camera_server::CaptureStatus* RespondCaptureStatusRequest::release_capture_status() {
  
  ::mavsdk::rpc::camera_server::CaptureStatus* temp = capture_status_;
  capture_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera_server::CaptureStatus* RespondCaptureStatusRequest::unsafe_arena_release_capture_status() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.RespondCaptureStatusRequest.capture_status)
  
  ::mavsdk::rpc::camera_server::CaptureStatus* temp = capture_status_;
  capture_status_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera_server::CaptureStatus* RespondCaptureStatusRequest::_internal_mutable_capture_status() {
  
  if (capture_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera_server::CaptureStatus>(GetArenaForAllocation());
    capture_status_ = p;
  }
  return capture_status_;
}
inline ::mavsdk::rpc::camera_server::CaptureStatus* RespondCaptureStatusRequest::mutable_capture_status() {
  ::mavsdk::rpc::camera_server::CaptureStatus* _msg = _internal_mutable_capture_status();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.RespondCaptureStatusRequest.capture_status)
  return _msg;
}
inline void RespondCaptureStatusRequest::set_allocated_capture_status(::mavsdk::rpc::camera_server::CaptureStatus* capture_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete capture_status_;
  }
  if (capture_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(capture_status);
    if (message_arena != submessage_arena) {
      capture_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capture_status, submessage_arena);
    }
    
  } else {
    
  }
  capture_status_ = capture_status;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.RespondCaptureStatusRequest.capture_status)
}

// -------------------------------------------------------------------

// RespondCaptureStatusResponse

// .mavsdk.rpc.camera_server.CameraServerResult camera_server_result = 1;
inline bool RespondCaptureStatusResponse::_internal_has_camera_server_result() const {
  return this != internal_default_instance() && camera_server_result_ != nullptr;
}
inline bool RespondCaptureStatusResponse::has_camera_server_result() const {
  return _internal_has_camera_server_result();
}
inline void RespondCaptureStatusResponse::clear_camera_server_result() {
  if (GetArenaForAllocation() == nullptr && camera_server_result_ != nullptr) {
    delete camera_server_result_;
  }
  camera_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera_server::CameraServerResult& RespondCaptureStatusResponse::_internal_camera_server_result() const {
  const ::mavsdk::rpc::camera_server::CameraServerResult* p = camera_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera_server::CameraServerResult&>(
      ::mavsdk::rpc::camera_server::_CameraServerResult_default_instance_);
}
inline const ::mavsdk::rpc::camera_server::CameraServerResult& RespondCaptureStatusResponse::camera_server_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.RespondCaptureStatusResponse.camera_server_result)
  return _internal_camera_server_result();
}
inline void RespondCaptureStatusResponse::unsafe_arena_set_allocated_camera_server_result(
    ::mavsdk::rpc::camera_server::CameraServerResult* camera_server_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_server_result_);
  }
  camera_server_result_ = camera_server_result;
  if (camera_server_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera_server.RespondCaptureStatusResponse.camera_server_result)
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* RespondCaptureStatusResponse::release_camera_server_result() {
  
  ::mavsdk::rpc::camera_server::CameraServerResult* temp = camera_server_result_;
  camera_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* RespondCaptureStatusResponse::unsafe_arena_release_camera_server_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.RespondCaptureStatusResponse.camera_server_result)
  
  ::mavsdk::rpc::camera_server::CameraServerResult* temp = camera_server_result_;
  camera_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* RespondCaptureStatusResponse::_internal_mutable_camera_server_result() {
  
  if (camera_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera_server::CameraServerResult>(GetArenaForAllocation());
    camera_server_result_ = p;
  }
  return camera_server_result_;
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* RespondCaptureStatusResponse::mutable_camera_server_result() {
  ::mavsdk::rpc::camera_server::CameraServerResult* _msg = _internal_mutable_camera_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.RespondCaptureStatusResponse.camera_server_result)
  return _msg;
}
inline void RespondCaptureStatusResponse::set_allocated_camera_server_result(::mavsdk::rpc::camera_server::CameraServerResult* camera_server_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete camera_server_result_;
  }
  if (camera_server_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_server_result);
    if (message_arena != submessage_arena) {
      camera_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_server_result, submessage_arena);
    }
    
  } else {
    
  }
  camera_server_result_ = camera_server_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.RespondCaptureStatusResponse.camera_server_result)
}

// -------------------------------------------------------------------

// SubscribeFormatStorageRequest

// -------------------------------------------------------------------

// FormatStorageResponse

// int32 storage_id = 1;
inline void FormatStorageResponse::clear_storage_id() {
  storage_id_ = 0;
}
inline int32_t FormatStorageResponse::_internal_storage_id() const {
  return storage_id_;
}
inline int32_t FormatStorageResponse::storage_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.FormatStorageResponse.storage_id)
  return _internal_storage_id();
}
inline void FormatStorageResponse::_internal_set_storage_id(int32_t value) {
  
  storage_id_ = value;
}
inline void FormatStorageResponse::set_storage_id(int32_t value) {
  _internal_set_storage_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.FormatStorageResponse.storage_id)
}

// -------------------------------------------------------------------

// SubscribeResetSettingsRequest

// -------------------------------------------------------------------

// ResetSettingsResponse

// int32 reserved = 1;
inline void ResetSettingsResponse::clear_reserved() {
  reserved_ = 0;
}
inline int32_t ResetSettingsResponse::_internal_reserved() const {
  return reserved_;
}
inline int32_t ResetSettingsResponse::reserved() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.ResetSettingsResponse.reserved)
  return _internal_reserved();
}
inline void ResetSettingsResponse::_internal_set_reserved(int32_t value) {
  
  reserved_ = value;
}
inline void ResetSettingsResponse::set_reserved(int32_t value) {
  _internal_set_reserved(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.ResetSettingsResponse.reserved)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace camera_server
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::camera_server::CameraServerResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::camera_server::CameraServerResult_Result>() {
  return ::mavsdk::rpc::camera_server::CameraServerResult_Result_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::camera_server::StorageInformation_StorageStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::camera_server::StorageInformation_StorageStatus>() {
  return ::mavsdk::rpc::camera_server::StorageInformation_StorageStatus_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::camera_server::StorageInformation_StorageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::camera_server::StorageInformation_StorageType>() {
  return ::mavsdk::rpc::camera_server::StorageInformation_StorageType_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::camera_server::CaptureStatus_ImageStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::camera_server::CaptureStatus_ImageStatus>() {
  return ::mavsdk::rpc::camera_server::CaptureStatus_ImageStatus_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::camera_server::CaptureStatus_VideoStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::camera_server::CaptureStatus_VideoStatus>() {
  return ::mavsdk::rpc::camera_server::CaptureStatus_VideoStatus_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::camera_server::TakePhotoFeedback> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::camera_server::TakePhotoFeedback>() {
  return ::mavsdk::rpc::camera_server::TakePhotoFeedback_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::camera_server::Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::camera_server::Mode>() {
  return ::mavsdk::rpc::camera_server::Mode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_camera_5fserver_2fcamera_5fserver_2eproto
